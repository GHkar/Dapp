eth.accounts
eth.coinbase
miner.start(1)
eth.mining
eth.hashrate
eth.blockNumber()
eth.blockNumber
eth.getBalance(eth.coinbase)
eth.blockNumber
eth.getBalance(eth.coinbase)
eth.mining
eth.getBlockNubmer
eth.blockNumber
eth.hashrate
eth.getBalance(eth.coinbase)
eth.sendTransaction({from:eth.accounts[0], to:eth.accounts[1], value:web3.toWei(10,"ether")})
eth.pendingTransactions
miner.stop()
eth.getBalance(eth.accounts[1])
admin.setSolc("/usr/bin/solc")
loadScripts('HelloWorld.js')
loadScript('HelloWorld.js')
var abi = solAbi
var compiledContract = eth.contract(abi)
var bytecode = '0x' + solBin
_greeting = "Hello,World!"
var contract = compiledContract.new(_greeting, {from:eth.accounts[0], data:bytecode, gas:'4700000'})
contract
miner.start(1)
eth.blockNumber
minter.stop()
minter.stop
miner.stop()
eth.blockNumber
eth.blockNumver
eth.blockNumber
eth.getBalance(eth.accounts[0])
contract
const ByteCode_File = JSON.parse(fs.readFileSync('bytecode', 'utf-8')
);
var abi = [{"inputs":[{"internalType":"string","name":"g","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"greeting","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"say","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"g","type":"string"}],"name":"setGreeting","outputs":[],"stateMutability":"nonpayable","type":"function"}]
var bytecode = "0x60806040523480156200001157600080fd5b50604051620008c7380380620008c78339818101604052810190620000379190620002a4565b80600090805190602001906200004f92919062000057565b505062000359565b828054620000659062000324565b90600052602060002090601f016020900481019282620000895760008555620000d5565b82601f10620000a457805160ff1916838001178555620000d5565b82800160010185558215620000d5579182015b82811115620000d4578251825591602001919060010190620000b7565b5b509050620000e49190620000e8565b5090565b5b8082111562000103576000816000905550600101620000e9565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001708262000125565b810181811067ffffffffffffffff8211171562000192576200019162000136565b5b80604052505050565b6000620001a762000107565b9050620001b5828262000165565b919050565b600067ffffffffffffffff821115620001d857620001d762000136565b5b620001e38262000125565b9050602081019050919050565b60005b8381101562000210578082015181840152602081019050620001f3565b8381111562000220576000848401525b50505050565b60006200023d6200023784620001ba565b6200019b565b9050828152602081018484840111156200025c576200025b62000120565b5b62000269848285620001f0565b509392505050565b600082601f8301126200028957620002886200011b565b5b81516200029b84826020860162000226565b91505092915050565b600060208284031215620002bd57620002bc62000111565b5b600082015167ffffffffffffffff811115620002de57620002dd62000116565b5b620002ec8482850162000271565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200033d57607f821691505b602082108103620003535762000352620002f5565b5b50919050565b61055e80620003696000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063954ab4b214610046578063a413686214610064578063ef690cc014610080575b600080fd5b61004e61009e565b60405161005b9190610314565b60405180910390f35b61007e6004803603810190610079919061047f565b610130565b005b61008861014a565b6040516100959190610314565b60405180910390f35b6060600080546100ad906104f7565b80601f01602080910402602001604051908101604052809291908181526020018280546100d9906104f7565b80156101265780601f106100fb57610100808354040283529160200191610126565b820191906000526020600020905b81548152906001019060200180831161010957829003601f168201915b5050505050905090565b80600090805190602001906101469291906101d8565b5050565b60008054610157906104f7565b80601f0160208091040260200160405190810160405280929190818152602001828054610183906104f7565b80156101d05780601f106101a5576101008083540402835291602001916101d0565b820191906000526020600020905b8154815290600101906020018083116101b357829003601f168201915b505050505081565b8280546101e4906104f7565b90600052602060002090601f016020900481019282610206576000855561024d565b82601f1061021f57805160ff191683800117855561024d565b8280016001018555821561024d579182015b8281111561024c578251825591602001919060010190610231565b5b50905061025a919061025e565b5090565b5b8082111561027757600081600090555060010161025f565b5090565b600081519050919050565b600082825260208201905092915050565b60005b838110156102b557808201518184015260208101905061029a565b838111156102c4576000848401525b50505050565b6000601f19601f8301169050919050565b60006102e68261027b565b6102f08185610286565b9350610300818560208601610297565b610309816102ca565b840191505092915050565b6000602082019050818103600083015261032e81846102db565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61038c826102ca565b810181811067ffffffffffffffff821117156103ab576103aa610354565b5b80604052505050565b60006103be610336565b90506103ca8282610383565b919050565b600067ffffffffffffffff8211156103ea576103e9610354565b5b6103f3826102ca565b9050602081019050919050565b82818337600083830152505050565b600061042261041d846103cf565b6103b4565b90508281526020810184848401111561043e5761043d61034f565b5b610449848285610400565b509392505050565b600082601f8301126104665761046561034a565b5b813561047684826020860161040f565b91505092915050565b60006020828403121561049557610494610340565b5b600082013567ffffffffffffffff8111156104b3576104b2610345565b5b6104bf84828501610451565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061050f57607f821691505b602082108103610522576105216104c8565b5b5091905056fea26469706673582212201261fbde5a57ac719dbcb71ab8b5a6d930c826bf7d29cde090a7388815f5d80b64736f6c634300080d0033"
var address = ""
var simpleContract = web.eth.contract(abi)
var simpleContract = web3.eth.contract(abi)
var simple = simpleContract.new("Hello, ethereum", {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x47b760
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
     }
 }
});
var simple = simpleContract.new("Hello, ethereum", {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x7530
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
     }
 }
});
var simple = simpleContract.new("Hello, ethereum", {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xaae60
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
     }
 }
});
simple
miner.start(1)
miner.stop
miner.stop()
simple
simple.say.call()
simple.greeting.call()
contract
simple
var abi = [{"inputs":[{"internalType":"string","name":"g","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"greeting","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"say","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"g","type":"string"}],"name":"setGreeting","outputs":[],"stateMutability":"nonpayable","type":"function"}]
var simple = eth.contract(abi).at("0x63dcbc34517c06d3c0489f745daec21de1044841")
simple
simple.say.call()
simple.at("0x63dcbc34517c06d3c0489f745daec21de1044841").say()
simple.say()
simple
simple.setGreeting.sendTransaction("Hello, Ethereum!", {from:eth.accounts[0], gas:100000})
simple
simple.say.call()
miner.start(1)
miner.stop()
simple.say.call()
simple
eth.blockNumber
miner.start(1)
eth.blockNumber
miner.stop()
simple
simple.say.call()
simple.greeting.call()
simple
simple.greeting.call()
simple.say.call("hello")
simple.say.call()
simple.say(function(error, response){
  if (error) {
    console.log(`displayerr: ${error}`);
  } else {
    console.log(`displaymsg: ${response}`);
  }
});
simple.say()
simple.greeting.call()
eth.getBalance(coinbase)
eth.getBalance(eth.accounts[0])
eth.pendingTransactions
simple.setGreeting.sendTransaction("hello", {from:eth.accounts[0], gas:0xaae60})
eth.getBalance(eth.accounts[0])
eth.pendingTransactions
miner.start(1)
eth.pendingTransactions
miner.stop()
eth.getBalance(eth.accounts[0])
eth.getTransaction("0x0be1c54ef4b34783399c1b535210b411f84a48848b97261ccd43e92a8ecbe007"
)
simple.say.call()
simple.say.call
simple.call.say()
simple.say()
simple
console.log(simple.say)
console.log(simple.say().call())
console.log(simple.say.call())
var bytecode = "0x60806040523480156200001157600080fd5b50604051620008c7380380620008c78339818101604052810190620000379190620002a4565b80600090805190602001906200004f92919062000057565b505062000359565b828054620000659062000324565b90600052602060002090601f016020900481019282620000895760008555620000d5565b82601f10620000a457805160ff1916838001178555620000d5565b82800160010185558215620000d5579182015b82811115620000d4578251825591602001919060010190620000b7565b5b509050620000e49190620000e8565b5090565b5b8082111562000103576000816000905550600101620000e9565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001708262000125565b810181811067ffffffffffffffff8211171562000192576200019162000136565b5b80604052505050565b6000620001a762000107565b9050620001b5828262000165565b919050565b600067ffffffffffffffff821115620001d857620001d762000136565b5b620001e38262000125565b9050602081019050919050565b60005b8381101562000210578082015181840152602081019050620001f3565b8381111562000220576000848401525b50505050565b60006200023d6200023784620001ba565b6200019b565b9050828152602081018484840111156200025c576200025b62000120565b5b62000269848285620001f0565b509392505050565b600082601f8301126200028957620002886200011b565b5b81516200029b84826020860162000226565b91505092915050565b600060208284031215620002bd57620002bc62000111565b5b600082015167ffffffffffffffff811115620002de57620002dd62000116565b5b620002ec8482850162000271565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200033d57607f821691505b602082108103620003535762000352620002f5565b5b50919050565b61055e80620003696000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063954ab4b214610046578063a413686214610064578063ef690cc014610080575b600080fd5b61004e61009e565b60405161005b9190610314565b60405180910390f35b61007e6004803603810190610079919061047f565b610130565b005b61008861014a565b6040516100959190610314565b60405180910390f35b6060600080546100ad906104f7565b80601f01602080910402602001604051908101604052809291908181526020018280546100d9906104f7565b80156101265780601f106100fb57610100808354040283529160200191610126565b820191906000526020600020905b81548152906001019060200180831161010957829003601f168201915b5050505050905090565b80600090805190602001906101469291906101d8565b5050565b60008054610157906104f7565b80601f0160208091040260200160405190810160405280929190818152602001828054610183906104f7565b80156101d05780601f106101a5576101008083540402835291602001916101d0565b820191906000526020600020905b8154815290600101906020018083116101b357829003601f168201915b505050505081565b8280546101e4906104f7565b90600052602060002090601f016020900481019282610206576000855561024d565b82601f1061021f57805160ff191683800117855561024d565b8280016001018555821561024d579182015b8281111561024c578251825591602001919060010190610231565b5b50905061025a919061025e565b5090565b5b8082111561027757600081600090555060010161025f565b5090565b600081519050919050565b600082825260208201905092915050565b60005b838110156102b557808201518184015260208101905061029a565b838111156102c4576000848401525b50505050565b6000601f19601f8301169050919050565b60006102e68261027b565b6102f08185610286565b9350610300818560208601610297565b610309816102ca565b840191505092915050565b6000602082019050818103600083015261032e81846102db565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61038c826102ca565b810181811067ffffffffffffffff821117156103ab576103aa610354565b5b80604052505050565b60006103be610336565b90506103ca8282610383565b919050565b600067ffffffffffffffff8211156103ea576103e9610354565b5b6103f3826102ca565b9050602081019050919050565b82818337600083830152505050565b600061042261041d846103cf565b6103b4565b90508281526020810184848401111561043e5761043d61034f565b5b610449848285610400565b509392505050565b600082601f8301126104665761046561034a565b5b813561047684826020860161040f565b91505092915050565b60006020828403121561049557610494610340565b5b600082013567ffffffffffffffff8111156104b3576104b2610345565b5b6104bf84828501610451565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061050f57607f821691505b602082108103610522576105216104c8565b5b5091905056fea26469706673582212201261fbde5a57ac719dbcb71ab8b5a6d930c826bf7d29cde090a7388815f5d80b64736f6c634300080d0033"
var simple = simpleContract.new("Hello, ethereum", {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xaae60
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
var address = ""
var simpleContract = web3.eth.contract(abi)
var simple = simpleContract.new("Hello, ethereum", {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xaae60
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
simple
simple.say.call()
var simple = simpleContract.new("Hello, ethereum", {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xaae60
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.say());
     }
 }
});
miner.start(1)
miner.stop()
simple
simple.say()
simple.say().call()
simple.call().say()
simple.say.call()
simple.functions.say.call()
simple.functions.say().call()
simple.functions.greeting.call()
simple.functions.say().call()
deployed = web3.eth.conctract(address="0x888157376d17e5a6a75d5e9cd8855bce3f3da51b", abi=abi)
deployed = web3.eth.contract(address="0x888157376d17e5a6a75d5e9cd8855bce3f3da51b", abi=abi)
deployed.functions.say().call()
simple.all_functions()
simple
deployed
deployed.functions.say().call()
simple
simple.fuctions.greeting().call()
simple.functions.say().call()
simple.say()
simple.say().call()
simple.methods.say().call()
deployed.methods.say().call()
simple.say().send({from:eth.accounts[0]})
simple.say().send({from:eth.accounts[0]});
var mycontract = new web3.eth.Contract(abi,"0x888157376d17e5a6a75d5e9cd8855bce3f3da51b")
var mycontract = web3.eth.Contract(abi,"0x888157376d17e5a6a75d5e9cd8855bce3f3da51b")
var mycontract = web3.eth.contract(abi,"0x888157376d17e5a6a75d5e9cd8855bce3f3da51b")
mycontract
mycontract.methods.say().call().then(result => cosole.log("smart " + result))
simple
history
var abi = [{"inputs":[{"internalType":"string","name":"g","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"greeting","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"say","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"g","type":"string"}],"name":"setGreeting","outputs":[],"stateMutability":"nonpayable","type":"function"}]
var simp = web3.eth.contract(simpleabi).at("0x81b0f269835c1188373e60f026c71f0f3a5120b9");
var simp = web3.eth.contract(abi).at("0x63dcbc34517c06d3c0489f745daec21de1044841");
simp
simp.data()
simp.say()
var bytecode = "0x60806040523480156200001157600080fd5b50604051620008c7380380620008c78339818101604052810190620000379190620002a4565b80600090805190602001906200004f92919062000057565b505062000359565b828054620000659062000324565b90600052602060002090601f016020900481019282620000895760008555620000d5565b82601f10620000a457805160ff1916838001178555620000d5565b82800160010185558215620000d5579182015b82811115620000d4578251825591602001919060010190620000b7565b5b509050620000e49190620000e8565b5090565b5b8082111562000103576000816000905550600101620000e9565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001708262000125565b810181811067ffffffffffffffff8211171562000192576200019162000136565b5b80604052505050565b6000620001a762000107565b9050620001b5828262000165565b919050565b600067ffffffffffffffff821115620001d857620001d762000136565b5b620001e38262000125565b9050602081019050919050565b60005b8381101562000210578082015181840152602081019050620001f3565b8381111562000220576000848401525b50505050565b60006200023d6200023784620001ba565b6200019b565b9050828152602081018484840111156200025c576200025b62000120565b5b62000269848285620001f0565b509392505050565b600082601f8301126200028957620002886200011b565b5b81516200029b84826020860162000226565b91505092915050565b600060208284031215620002bd57620002bc62000111565b5b600082015167ffffffffffffffff811115620002de57620002dd62000116565b5b620002ec8482850162000271565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200033d57607f821691505b602082108103620003535762000352620002f5565b5b50919050565b61055e80620003696000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063954ab4b214610046578063a413686214610064578063ef690cc014610080575b600080fd5b61004e61009e565b60405161005b9190610314565b60405180910390f35b61007e6004803603810190610079919061047f565b610130565b005b61008861014a565b6040516100959190610314565b60405180910390f35b6060600080546100ad906104f7565b80601f01602080910402602001604051908101604052809291908181526020018280546100d9906104f7565b80156101265780601f106100fb57610100808354040283529160200191610126565b820191906000526020600020905b81548152906001019060200180831161010957829003601f168201915b5050505050905090565b80600090805190602001906101469291906101d8565b5050565b60008054610157906104f7565b80601f0160208091040260200160405190810160405280929190818152602001828054610183906104f7565b80156101d05780601f106101a5576101008083540402835291602001916101d0565b820191906000526020600020905b8154815290600101906020018083116101b357829003601f168201915b505050505081565b8280546101e4906104f7565b90600052602060002090601f016020900481019282610206576000855561024d565b82601f1061021f57805160ff191683800117855561024d565b8280016001018555821561024d579182015b8281111561024c578251825591602001919060010190610231565b5b50905061025a919061025e565b5090565b5b8082111561027757600081600090555060010161025f565b5090565b600081519050919050565b600082825260208201905092915050565b60005b838110156102b557808201518184015260208101905061029a565b838111156102c4576000848401525b50505050565b6000601f19601f8301169050919050565b60006102e68261027b565b6102f08185610286565b9350610300818560208601610297565b610309816102ca565b840191505092915050565b6000602082019050818103600083015261032e81846102db565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61038c826102ca565b810181811067ffffffffffffffff821117156103ab576103aa610354565b5b80604052505050565b60006103be610336565b90506103ca8282610383565b919050565b600067ffffffffffffffff8211156103ea576103e9610354565b5b6103f3826102ca565b9050602081019050919050565b82818337600083830152505050565b600061042261041d846103cf565b6103b4565b90508281526020810184848401111561043e5761043d61034f565b5b610449848285610400565b509392505050565b600082601f8301126104665761046561034a565b5b813561047684826020860161040f565b91505092915050565b60006020828403121561049557610494610340565b5b600082013567ffffffffffffffff8111156104b3576104b2610345565b5b6104bf84828501610451565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061050f57607f821691505b602082108103610522576105216104c8565b5b5091905056fea26469706673582212201261fbde5a57ac719dbcb71ab8b5a6d930c826bf7d29cde090a7388815f5d80b64736f6c634300080d0033"
var address = eth.accounts[0]
address
var simpleContract = web3.eth.contract(abi)
web3.eth.defaultAccount = web3.eth.accounts[0]
web3.eth.defaultAccount
contractObj = web3.eth.contract(abi).at("0x63dcbc34517c06d3c0489f745daec21de1044841")
contractObj.say()
eth.getBalnce(coinbase)
eth.getBalnce(eth.accounts[0])
eth.getBalance(eth.accounts[0])
eth.getBlockNumer
eth.getBlockNumber
eth.getBlockNumber()
eth.blockNumber
[{"inputs":[{"internalType":"string","name":"g","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"greeting","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"say","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"g","type":"string"}],"name":"setGreeting","outputs":[],"stateMutability":"nonpayable","type":"function"}]
var abi = [{"inputs":[{"internalType":"string","name":"g","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"greeting","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"say","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"g","type":"string"}],"name":"setGreeting","outputs":[],"stateMutability":"nonpayable","type":"function"}]
var simp = web3.eth.contract(abi).at("0x63dcbc34517c06d3c0489f745daec21de1044841")
simp
simp.say()
simp.say.call()
var abi = [{"inputs":[{"internalType":"uint256","name":"_supply","type":"uint256"},{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"},{"internalType":"uint8","name":"_decimals","type":"uint8"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"}]
var bytecode = 60806040523480156200001157600080fd5b5060405162000ca138038062000ca183398181016040528101906200003791906200039f565b83600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550826000908051906020019062000093929190620000d9565b508160019080519060200190620000ac929190620000d9565b5080600260006101000a81548160ff021916908360ff1602179055508360038190555050505050620004b3565b828054620000e7906200047e565b90600052602060002090601f0160209004810192826200010b576000855562000157565b82601f106200012657805160ff191683800117855562000157565b8280016001018555821562000157579182015b828111156200015657825182559160200191906001019062000139565b5b5090506200016691906200016a565b5090565b5b80821115620001855760008160009055506001016200016b565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b620001b2816200019d565b8114620001be57600080fd5b50565b600081519050620001d281620001a7565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200022d82620001e2565b810181811067ffffffffffffffff821117156200024f576200024e620001f3565b5b80604052505050565b60006200026462000189565b905062000272828262000222565b919050565b600067ffffffffffffffff821115620002955762000294620001f3565b5b620002a082620001e2565b9050602081019050919050565b60005b83811015620002cd578082015181840152602081019050620002b0565b83811115620002dd576000848401525b50505050565b6000620002fa620002f48462000277565b62000258565b905082815260208101848484011115620003195762000318620001dd565b5b62000326848285620002ad565b509392505050565b600082601f830112620003465762000345620001d8565b5b815162000358848260208601620002e3565b91505092915050565b600060ff82169050919050565b620003798162000361565b81146200038557600080fd5b50565b60008151905062000399816200036e565b92915050565b60008060008060808587031215620003bc57620003bb62000193565b5b6000620003cc87828801620001c1565b945050602085015167ffffffffffffffff811115620003f057620003ef62000198565b5b620003fe878288016200032e565b935050604085015167ffffffffffffffff81111562000422576200042162000198565b5b62000430878288016200032e565b9250506060620004438782880162000388565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200049757607f821691505b602082108103620004ad57620004ac6200044f565b5b50919050565b6107de80620004c36000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306fdde031461006757806318160ddd14610085578063313ce567146100a357806370a08231146100c157806395d89b41146100f1578063a9059cbb1461010f575b600080fd5b61006f61012b565b60405161007c9190610506565b60405180910390f35b61008d6101b9565b60405161009a9190610541565b60405180910390f35b6100ab6101bf565b6040516100b89190610578565b60405180910390f35b6100db60048036038101906100d691906105f6565b6101d2565b6040516100e89190610541565b60405180910390f35b6100f96101ea565b6040516101069190610506565b60405180910390f35b6101296004803603810190610124919061064f565b610278565b005b60008054610138906106be565b80601f0160208091040260200160405190810160405280929190818152602001828054610164906106be565b80156101b15780601f10610186576101008083540402835291602001916101b1565b820191906000526020600020905b81548152906001019060200180831161019457829003601f168201915b505050505081565b60035481565b600260009054906101000a900460ff1681565b60046020528060005260406000206000915090505481565b600180546101f7906106be565b80601f0160208091040260200160405190810160405280929190818152602001828054610223906106be565b80156102705780601f1061024557610100808354040283529160200191610270565b820191906000526020600020905b81548152906001019060200180831161025357829003601f168201915b505050505081565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116102c357600080fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461034e919061071e565b1161035857600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103a79190610774565b9250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103fd919061071e565b925050819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516104619190610541565b60405180910390a35050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104a757808201518184015260208101905061048c565b838111156104b6576000848401525b50505050565b6000601f19601f8301169050919050565b60006104d88261046d565b6104e28185610478565b93506104f2818560208601610489565b6104fb816104bc565b840191505092915050565b6000602082019050818103600083015261052081846104cd565b905092915050565b6000819050919050565b61053b81610528565b82525050565b60006020820190506105566000830184610532565b92915050565b600060ff82169050919050565b6105728161055c565b82525050565b600060208201905061058d6000830184610569565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105c382610598565b9050919050565b6105d3816105b8565b81146105de57600080fd5b50565b6000813590506105f0816105ca565b92915050565b60006020828403121561060c5761060b610593565b5b600061061a848285016105e1565b91505092915050565b61062c81610528565b811461063757600080fd5b50565b60008135905061064981610623565b92915050565b6000806040838503121561066657610665610593565b5b6000610674858286016105e1565b92505060206106858582860161063a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806106d657607f821691505b6020821081036106e9576106e861068f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061072982610528565b915061073483610528565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610769576107686106ef565b5b828201905092915050565b600061077f82610528565b915061078a83610528565b92508282101561079d5761079c6106ef565b5b82820390509291505056fea26469706673582212206ce51e621324fd9abc1156875fb111abd6fe1b8de7dfa46f2c0c3c0ebeb9768964736f6c634300080d0033
var bytecode = "60806040523480156200001157600080fd5b5060405162000ca138038062000ca183398181016040528101906200003791906200039f565b83600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550826000908051906020019062000093929190620000d9565b508160019080519060200190620000ac929190620000d9565b5080600260006101000a81548160ff021916908360ff1602179055508360038190555050505050620004b3565b828054620000e7906200047e565b90600052602060002090601f0160209004810192826200010b576000855562000157565b82601f106200012657805160ff191683800117855562000157565b8280016001018555821562000157579182015b828111156200015657825182559160200191906001019062000139565b5b5090506200016691906200016a565b5090565b5b80821115620001855760008160009055506001016200016b565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b620001b2816200019d565b8114620001be57600080fd5b50565b600081519050620001d281620001a7565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200022d82620001e2565b810181811067ffffffffffffffff821117156200024f576200024e620001f3565b5b80604052505050565b60006200026462000189565b905062000272828262000222565b919050565b600067ffffffffffffffff821115620002955762000294620001f3565b5b620002a082620001e2565b9050602081019050919050565b60005b83811015620002cd578082015181840152602081019050620002b0565b83811115620002dd576000848401525b50505050565b6000620002fa620002f48462000277565b62000258565b905082815260208101848484011115620003195762000318620001dd565b5b62000326848285620002ad565b509392505050565b600082601f830112620003465762000345620001d8565b5b815162000358848260208601620002e3565b91505092915050565b600060ff82169050919050565b620003798162000361565b81146200038557600080fd5b50565b60008151905062000399816200036e565b92915050565b60008060008060808587031215620003bc57620003bb62000193565b5b6000620003cc87828801620001c1565b945050602085015167ffffffffffffffff811115620003f057620003ef62000198565b5b620003fe878288016200032e565b935050604085015167ffffffffffffffff81111562000422576200042162000198565b5b62000430878288016200032e565b9250506060620004438782880162000388565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200049757607f821691505b602082108103620004ad57620004ac6200044f565b5b50919050565b6107de80620004c36000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306fdde031461006757806318160ddd14610085578063313ce567146100a357806370a08231146100c157806395d89b41146100f1578063a9059cbb1461010f575b600080fd5b61006f61012b565b60405161007c9190610506565b60405180910390f35b61008d6101b9565b60405161009a9190610541565b60405180910390f35b6100ab6101bf565b6040516100b89190610578565b60405180910390f35b6100db60048036038101906100d691906105f6565b6101d2565b6040516100e89190610541565b60405180910390f35b6100f96101ea565b6040516101069190610506565b60405180910390f35b6101296004803603810190610124919061064f565b610278565b005b60008054610138906106be565b80601f0160208091040260200160405190810160405280929190818152602001828054610164906106be565b80156101b15780601f10610186576101008083540402835291602001916101b1565b820191906000526020600020905b81548152906001019060200180831161019457829003601f168201915b505050505081565b60035481565b600260009054906101000a900460ff1681565b60046020528060005260406000206000915090505481565b600180546101f7906106be565b80601f0160208091040260200160405190810160405280929190818152602001828054610223906106be565b80156102705780601f1061024557610100808354040283529160200191610270565b820191906000526020600020905b81548152906001019060200180831161025357829003601f168201915b505050505081565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116102c357600080fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461034e919061071e565b1161035857600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103a79190610774565b9250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103fd919061071e565b925050819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516104619190610541565b60405180910390a35050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104a757808201518184015260208101905061048c565b838111156104b6576000848401525b50505050565b6000601f19601f8301169050919050565b60006104d88261046d565b6104e28185610478565b93506104f2818560208601610489565b6104fb816104bc565b840191505092915050565b6000602082019050818103600083015261052081846104cd565b905092915050565b6000819050919050565b61053b81610528565b82525050565b60006020820190506105566000830184610532565b92915050565b600060ff82169050919050565b6105728161055c565b82525050565b600060208201905061058d6000830184610569565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105c382610598565b9050919050565b6105d3816105b8565b81146105de57600080fd5b50565b6000813590506105f0816105ca565b92915050565b60006020828403121561060c5761060b610593565b5b600061061a848285016105e1565b91505092915050565b61062c81610528565b811461063757600080fd5b50565b60008135905061064981610623565b92915050565b6000806040838503121561066657610665610593565b5b6000610674858286016105e1565b92505060206106858582860161063a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806106d657607f821691505b6020821081036106e9576106e861068f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061072982610528565b915061073483610528565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610769576107686106ef565b5b828201905092915050565b600061077f82610528565b915061078a83610528565b92508282101561079d5761079c6106ef565b5b82820390509291505056fea26469706673582212206ce51e621324fd9abc1156875fb111abd6fe1b8de7dfa46f2c0c3c0ebeb9768964736f6c634300080d0033"
var address = ""
var oreore = web3.eth.contract(abi)
oreore
eth.accounts
var ore = oreore.new('1000, "OreOreCoin", "oc", 0', {from:eth.accounts[0], data:bytecode, gas:1c9c380}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
bytecode
var bytecode = "0x60806040523480156200001157600080fd5b5060405162000ca138038062000ca183398181016040528101906200003791906200039f565b83600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550826000908051906020019062000093929190620000d9565b508160019080519060200190620000ac929190620000d9565b5080600260006101000a81548160ff021916908360ff1602179055508360038190555050505050620004b3565b828054620000e7906200047e565b90600052602060002090601f0160209004810192826200010b576000855562000157565b82601f106200012657805160ff191683800117855562000157565b8280016001018555821562000157579182015b828111156200015657825182559160200191906001019062000139565b5b5090506200016691906200016a565b5090565b5b80821115620001855760008160009055506001016200016b565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b620001b2816200019d565b8114620001be57600080fd5b50565b600081519050620001d281620001a7565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200022d82620001e2565b810181811067ffffffffffffffff821117156200024f576200024e620001f3565b5b80604052505050565b60006200026462000189565b905062000272828262000222565b919050565b600067ffffffffffffffff821115620002955762000294620001f3565b5b620002a082620001e2565b9050602081019050919050565b60005b83811015620002cd578082015181840152602081019050620002b0565b83811115620002dd576000848401525b50505050565b6000620002fa620002f48462000277565b62000258565b905082815260208101848484011115620003195762000318620001dd565b5b62000326848285620002ad565b509392505050565b600082601f830112620003465762000345620001d8565b5b815162000358848260208601620002e3565b91505092915050565b600060ff82169050919050565b620003798162000361565b81146200038557600080fd5b50565b60008151905062000399816200036e565b92915050565b60008060008060808587031215620003bc57620003bb62000193565b5b6000620003cc87828801620001c1565b945050602085015167ffffffffffffffff811115620003f057620003ef62000198565b5b620003fe878288016200032e565b935050604085015167ffffffffffffffff81111562000422576200042162000198565b5b62000430878288016200032e565b9250506060620004438782880162000388565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200049757607f821691505b602082108103620004ad57620004ac6200044f565b5b50919050565b6107de80620004c36000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306fdde031461006757806318160ddd14610085578063313ce567146100a357806370a08231146100c157806395d89b41146100f1578063a9059cbb1461010f575b600080fd5b61006f61012b565b60405161007c9190610506565b60405180910390f35b61008d6101b9565b60405161009a9190610541565b60405180910390f35b6100ab6101bf565b6040516100b89190610578565b60405180910390f35b6100db60048036038101906100d691906105f6565b6101d2565b6040516100e89190610541565b60405180910390f35b6100f96101ea565b6040516101069190610506565b60405180910390f35b6101296004803603810190610124919061064f565b610278565b005b60008054610138906106be565b80601f0160208091040260200160405190810160405280929190818152602001828054610164906106be565b80156101b15780601f10610186576101008083540402835291602001916101b1565b820191906000526020600020905b81548152906001019060200180831161019457829003601f168201915b505050505081565b60035481565b600260009054906101000a900460ff1681565b60046020528060005260406000206000915090505481565b600180546101f7906106be565b80601f0160208091040260200160405190810160405280929190818152602001828054610223906106be565b80156102705780601f1061024557610100808354040283529160200191610270565b820191906000526020600020905b81548152906001019060200180831161025357829003601f168201915b505050505081565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116102c357600080fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461034e919061071e565b1161035857600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103a79190610774565b9250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103fd919061071e565b925050819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516104619190610541565b60405180910390a35050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104a757808201518184015260208101905061048c565b838111156104b6576000848401525b50505050565b6000601f19601f8301169050919050565b60006104d88261046d565b6104e28185610478565b93506104f2818560208601610489565b6104fb816104bc565b840191505092915050565b6000602082019050818103600083015261052081846104cd565b905092915050565b6000819050919050565b61053b81610528565b82525050565b60006020820190506105566000830184610532565b92915050565b600060ff82169050919050565b6105728161055c565b82525050565b600060208201905061058d6000830184610569565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105c382610598565b9050919050565b6105d3816105b8565b81146105de57600080fd5b50565b6000813590506105f0816105ca565b92915050565b60006020828403121561060c5761060b610593565b5b600061061a848285016105e1565b91505092915050565b61062c81610528565b811461063757600080fd5b50565b60008135905061064981610623565b92915050565b6000806040838503121561066657610665610593565b5b6000610674858286016105e1565b92505060206106858582860161063a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806106d657607f821691505b6020821081036106e9576106e861068f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061072982610528565b915061073483610528565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610769576107686106ef565b5b828201905092915050565b600061077f82610528565b915061078a83610528565b92508282101561079d5761079c6106ef565b5b82820390509291505056fea26469706673582212206ce51e621324fd9abc1156875fb111abd6fe1b8de7dfa46f2c0c3c0ebeb9768964736f6c634300080d0033"
var ore = oreore.new('1000, "OreOreCoin", "oc", 0', {from:eth.accounts[0], data:bytecode, gas:1c9c380}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
var ore = oreore.new(1000, "OreOreCoin", "oc", 0, {from:eth.accounts[0], data:bytecode, gas:1c9c380}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
oreore
var ore = oreore.new(1000, "OreOreCoin", "oc", 0, {from:eth.accounts[0], data:bytecode, gas:1c9c380}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
bytecode
var ore = oreore.new('1000, "OreOreCoin", "oc", 0', {from:eth.accounts[0], data:bytecode, gas:1c9c380}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
var ore = oreore.new({10000, "OreOreCoin", "oc", 0}, {from:eth.accounts[0], data:bytecode, gas:1c9c380}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
var ore = oreore.new('10000, "OreOreCoin", "oc", 0', {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x1c9c380
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
var ore = oreore.new('10000, "OreOreCoin", "oc", 0', {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x493e0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
eth.getBalance(eth.accounts[0])
var ore = oreore.new('10000, "OreOreCoin", "oc", 0', {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x2dc6c0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
oreore
var ore = oreore.new('10000, "OreOreCoin", "oc", 0', {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x989680
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
var ore = oreore.new('10000, "OreOreCoin", "oc", 0', {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x4c4b40
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
var ore = oreore.new('10000, "OreOreCoin", "oc", 0', {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xf4240
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop(0)
miner.stop()
bytecode
var ore = oreore.new('10000, "OreOreCoin", "oc", 0', {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xf4240
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});eixt
var abi = [{"inputs":[{"internalType":"uint256","name":"_supply","type":"uint256"},{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"},{"internalType":"uint8","name":"_decimals","type":"uint8"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"}]
var bytecode = '0x60806040523480156200001157600080fd5b5060405162000ca138038062000ca183398181016040528101906200003791906200039f565b83600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550826000908051906020019062000093929190620000d9565b508160019080519060200190620000ac929190620000d9565b5080600260006101000a81548160ff021916908360ff1602179055508360038190555050505050620004b3565b828054620000e7906200047e565b90600052602060002090601f0160209004810192826200010b576000855562000157565b82601f106200012657805160ff191683800117855562000157565b8280016001018555821562000157579182015b828111156200015657825182559160200191906001019062000139565b5b5090506200016691906200016a565b5090565b5b80821115620001855760008160009055506001016200016b565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b620001b2816200019d565b8114620001be57600080fd5b50565b600081519050620001d281620001a7565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200022d82620001e2565b810181811067ffffffffffffffff821117156200024f576200024e620001f3565b5b80604052505050565b60006200026462000189565b905062000272828262000222565b919050565b600067ffffffffffffffff821115620002955762000294620001f3565b5b620002a082620001e2565b9050602081019050919050565b60005b83811015620002cd578082015181840152602081019050620002b0565b83811115620002dd576000848401525b50505050565b6000620002fa620002f48462000277565b62000258565b905082815260208101848484011115620003195762000318620001dd565b5b62000326848285620002ad565b509392505050565b600082601f830112620003465762000345620001d8565b5b815162000358848260208601620002e3565b91505092915050565b600060ff82169050919050565b620003798162000361565b81146200038557600080fd5b50565b60008151905062000399816200036e565b92915050565b60008060008060808587031215620003bc57620003bb62000193565b5b6000620003cc87828801620001c1565b945050602085015167ffffffffffffffff811115620003f057620003ef62000198565b5b620003fe878288016200032e565b935050604085015167ffffffffffffffff81111562000422576200042162000198565b5b62000430878288016200032e565b9250506060620004438782880162000388565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200049757607f821691505b602082108103620004ad57620004ac6200044f565b5b50919050565b6107de80620004c36000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306fdde031461006757806318160ddd14610085578063313ce567146100a357806370a08231146100c157806395d89b41146100f1578063a9059cbb1461010f575b600080fd5b61006f61012b565b60405161007c9190610506565b60405180910390f35b61008d6101b9565b60405161009a9190610541565b60405180910390f35b6100ab6101bf565b6040516100b89190610578565b60405180910390f35b6100db60048036038101906100d691906105f6565b6101d2565b6040516100e89190610541565b60405180910390f35b6100f96101ea565b6040516101069190610506565b60405180910390f35b6101296004803603810190610124919061064f565b610278565b005b60008054610138906106be565b80601f0160208091040260200160405190810160405280929190818152602001828054610164906106be565b80156101b15780601f10610186576101008083540402835291602001916101b1565b820191906000526020600020905b81548152906001019060200180831161019457829003601f168201915b505050505081565b60035481565b600260009054906101000a900460ff1681565b60046020528060005260406000206000915090505481565b600180546101f7906106be565b80601f0160208091040260200160405190810160405280929190818152602001828054610223906106be565b80156102705780601f1061024557610100808354040283529160200191610270565b820191906000526020600020905b81548152906001019060200180831161025357829003601f168201915b505050505081565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116102c357600080fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461034e919061071e565b1161035857600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103a79190610774565b9250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103fd919061071e565b925050819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516104619190610541565b60405180910390a35050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104a757808201518184015260208101905061048c565b838111156104b6576000848401525b50505050565b6000601f19601f8301169050919050565b60006104d88261046d565b6104e28185610478565b93506104f2818560208601610489565b6104fb816104bc565b840191505092915050565b6000602082019050818103600083015261052081846104cd565b905092915050565b6000819050919050565b61053b81610528565b82525050565b60006020820190506105566000830184610532565b92915050565b600060ff82169050919050565b6105728161055c565b82525050565b600060208201905061058d6000830184610569565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105c382610598565b9050919050565b6105d3816105b8565b81146105de57600080fd5b50565b6000813590506105f0816105ca565b92915050565b60006020828403121561060c5761060b610593565b5b600061061a848285016105e1565b91505092915050565b61062c81610528565b811461063757600080fd5b50565b60008135905061064981610623565b92915050565b6000806040838503121561066657610665610593565b5b6000610674858286016105e1565b92505060206106858582860161063a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806106d657607f821691505b6020821081036106e9576106e861068f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061072982610528565b915061073483610528565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610769576107686106ef565b5b828201905092915050565b600061077f82610528565b915061078a83610528565b92508282101561079d5761079c6106ef565b5b82820390509291505056fea26469706673582212206ce51e621324fd9abc1156875fb111abd6fe1b8de7dfa46f2c0c3c0ebeb9768964736f6c634300080d0033'
var address =""
var oreore = web3.eth.contract(abi)
var ore = oreore.new('10000, "OreOreCoin", "oc", 0', {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xf4240
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
bytecode
var bytecode = "0x60806040523480156200001157600080fd5b5060405162000ca138038062000ca183398181016040528101906200003791906200039f565b83600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550826000908051906020019062000093929190620000d9565b508160019080519060200190620000ac929190620000d9565b5080600260006101000a81548160ff021916908360ff1602179055508360038190555050505050620004b3565b828054620000e7906200047e565b90600052602060002090601f0160209004810192826200010b576000855562000157565b82601f106200012657805160ff191683800117855562000157565b8280016001018555821562000157579182015b828111156200015657825182559160200191906001019062000139565b5b5090506200016691906200016a565b5090565b5b80821115620001855760008160009055506001016200016b565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b620001b2816200019d565b8114620001be57600080fd5b50565b600081519050620001d281620001a7565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200022d82620001e2565b810181811067ffffffffffffffff821117156200024f576200024e620001f3565b5b80604052505050565b60006200026462000189565b905062000272828262000222565b919050565b600067ffffffffffffffff821115620002955762000294620001f3565b5b620002a082620001e2565b9050602081019050919050565b60005b83811015620002cd578082015181840152602081019050620002b0565b83811115620002dd576000848401525b50505050565b6000620002fa620002f48462000277565b62000258565b905082815260208101848484011115620003195762000318620001dd565b5b62000326848285620002ad565b509392505050565b600082601f830112620003465762000345620001d8565b5b815162000358848260208601620002e3565b91505092915050565b600060ff82169050919050565b620003798162000361565b81146200038557600080fd5b50565b60008151905062000399816200036e565b92915050565b60008060008060808587031215620003bc57620003bb62000193565b5b6000620003cc87828801620001c1565b945050602085015167ffffffffffffffff811115620003f057620003ef62000198565b5b620003fe878288016200032e565b935050604085015167ffffffffffffffff81111562000422576200042162000198565b5b62000430878288016200032e565b9250506060620004438782880162000388565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200049757607f821691505b602082108103620004ad57620004ac6200044f565b5b50919050565b6107de80620004c36000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306fdde031461006757806318160ddd14610085578063313ce567146100a357806370a08231146100c157806395d89b41146100f1578063a9059cbb1461010f575b600080fd5b61006f61012b565b60405161007c9190610506565b60405180910390f35b61008d6101b9565b60405161009a9190610541565b60405180910390f35b6100ab6101bf565b6040516100b89190610578565b60405180910390f35b6100db60048036038101906100d691906105f6565b6101d2565b6040516100e89190610541565b60405180910390f35b6100f96101ea565b6040516101069190610506565b60405180910390f35b6101296004803603810190610124919061064f565b610278565b005b60008054610138906106be565b80601f0160208091040260200160405190810160405280929190818152602001828054610164906106be565b80156101b15780601f10610186576101008083540402835291602001916101b1565b820191906000526020600020905b81548152906001019060200180831161019457829003601f168201915b505050505081565b60035481565b600260009054906101000a900460ff1681565b60046020528060005260406000206000915090505481565b600180546101f7906106be565b80601f0160208091040260200160405190810160405280929190818152602001828054610223906106be565b80156102705780601f1061024557610100808354040283529160200191610270565b820191906000526020600020905b81548152906001019060200180831161025357829003601f168201915b505050505081565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116102c357600080fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461034e919061071e565b1161035857600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103a79190610774565b9250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103fd919061071e565b925050819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516104619190610541565b60405180910390a35050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104a757808201518184015260208101905061048c565b838111156104b6576000848401525b50505050565b6000601f19601f8301169050919050565b60006104d88261046d565b6104e28185610478565b93506104f2818560208601610489565b6104fb816104bc565b840191505092915050565b6000602082019050818103600083015261052081846104cd565b905092915050565b6000819050919050565b61053b81610528565b82525050565b60006020820190506105566000830184610532565b92915050565b600060ff82169050919050565b6105728161055c565b82525050565b600060208201905061058d6000830184610569565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105c382610598565b9050919050565b6105d3816105b8565b81146105de57600080fd5b50565b6000813590506105f0816105ca565b92915050565b60006020828403121561060c5761060b610593565b5b600061061a848285016105e1565b91505092915050565b61062c81610528565b811461063757600080fd5b50565b60008135905061064981610623565b92915050565b6000806040838503121561066657610665610593565b5b6000610674858286016105e1565b92505060206106858582860161063a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806106d657607f821691505b6020821081036106e9576106e861068f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061072982610528565b915061073483610528565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610769576107686106ef565b5b828201905092915050565b600061077f82610528565b915061078a83610528565b92508282101561079d5761079c6106ef565b5b82820390509291505056fea26469706673582212206ce51e621324fd9abc1156875fb111abd6fe1b8de7dfa46f2c0c3c0ebeb9768964736f6c634300080d0033"
var abi = [{"inputs":[{"internalType":"uint256","name":"_supply","type":"uint256"},{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"},{"internalType":"uint8","name":"_decimals","type":"uint8"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"}]
abi
var address = ""
var simpleContract = web3.eth.contract(abi)
simpleContract
var simple = simpleContract.new('10000, "OreOreCoin", "oc", 0', {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xaae60
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
bytecode
var simple = simpleContract.new([10000, "OreOreCoin", "oc", 0], {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xaae60
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
var simple = simpleContract.new({10000, "OreOreCoin", "oc", 0}, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xaae60
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
var simple = simpleContract.new(10000, "OreOreCoin", "oc", 0, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xaae60
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
simple.balnaceOf(eth.accounts[0]).call()
simple.balanceOf(eth.accounts[0]).call()
simple.balanceOf(eth.accounts[0])
simple
var simp = web3.eth.contract(abi).at("0x56c08e143d0e99c188a397f5b654bdb4f87919fe")
simp
simp.balanceOf(eth.accounts[0])
simp.balanceOf("0x4d8364a1800d73a5ce9cc546fa3218869ce50c8f")
simp.balanceOf(0x4d8364a1800d73a5ce9cc546fa3218869ce50c8f)
simp.balanceOf("0x4d8364a1800d73a5ce9cc546fa3218869ce50c8f")
simple
simple.symbol
simple.symbol()
simple.symbol.call()
simple.name.call()
simple.balanceOf(0x4d8364a1800d73a5ce9cc546fa3218869ce50c8f).call()
simple.balanceOf("0x4d8364a1800d73a5ce9cc546fa3218869ce50c8f").call()
simple.totalSupply
simple.totalSupply.call()
simple.balanceOf("0x4d8364a1800d73a5ce9cc546fa3218869ce50c8f").call()
simple.balanceOf().call()
simple.balanceOf(eth.accounts[0]).call()
simple.balanceOf([eth.accounts[0]]).call()
simple.balanceOf(eth.accounts[0]).call()
PriceContract.web3.eth.defaultAccount=PriceContract.web3.eth.coinbase
simple.balanceOf(eth.accounts[0]).call()
eth.accounts[0]
simple.balanceOf("0x4d8364a1800d73a5ce9cc546fa3218869ce50c8f").call()
simple.balanceOf("0x4d8364a1800d73a5ce9cc546fa3218869ce50c8f")
simple.balanceOf("0x4d8364a1800d73a5ce9cc546fa3218869ce50c8f").call()
simple.balanceOf(0x4d8364a1800d73a5ce9cc546fa3218869ce50c8f).call()
simple.balanceOf('0x4d8364a1800d73a5ce9cc546fa3218869ce50c8f').call()
simple
simple.balanceOf()
simple.balanceOf().call()
simple.balanceOf.call()
simple.balanceOf.call("0x4d8364a1800d73a5ce9cc546fa3218869ce50c8f")
var abi = [{"inputs":[{"internalType":"uint256","name":"_key","type":"uint256"}],"name":"getValue1","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_key","type":"uint256"}],"name":"getValue2","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_value1","type":"string"},{"internalType":"string","name":"_value2","type":"string"}],"name":"setValue","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}]
var bytecode = "0x608060405234801561001057600080fd5b5061075b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063159c825614610046578063491460cf14610076578063ec86cfad146100a6575b600080fd5b610060600480360381019061005b919061038f565b6100d6565b60405161006d9190610455565b60405180910390f35b610090600480360381019061008b919061038f565b61017e565b60405161009d9190610455565b60405180910390f35b6100c060048036038101906100bb91906105ac565b610226565b6040516100cd9190610633565b60405180910390f35b60606001600083815260200190815260200160002060000180546100f99061067d565b80601f01602080910402602001604051908101604052809291908181526020018280546101259061067d565b80156101725780601f1061014757610100808354040283529160200191610172565b820191906000526020600020905b81548152906001019060200180831161015557829003601f168201915b50505050509050919050565b60606001600083815260200190815260200160002060010180546101a19061067d565b80601f01602080910402602001604051908101604052809291908181526020018280546101cd9061067d565b801561021a5780601f106101ef5761010080835404028352916020019161021a565b820191906000526020600020905b8154815290600101906020018083116101fd57829003601f168201915b50505050509050919050565b600082600160008054815260200190815260200160002060000190805190602001906102539291906102a2565b50816001600080548152602001908152602001600020600101908051906020019061027f9291906102a2565b50600080815480929190610292906106dd565b9190505550600054905092915050565b8280546102ae9061067d565b90600052602060002090601f0160209004810192826102d05760008555610317565b82601f106102e957805160ff1916838001178555610317565b82800160010185558215610317579182015b828111156103165782518255916020019190600101906102fb565b5b5090506103249190610328565b5090565b5b80821115610341576000816000905550600101610329565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61036c81610359565b811461037757600080fd5b50565b60008135905061038981610363565b92915050565b6000602082840312156103a5576103a461034f565b5b60006103b38482850161037a565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156103f65780820151818401526020810190506103db565b83811115610405576000848401525b50505050565b6000601f19601f8301169050919050565b6000610427826103bc565b61043181856103c7565b93506104418185602086016103d8565b61044a8161040b565b840191505092915050565b6000602082019050818103600083015261046f818461041c565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104b98261040b565b810181811067ffffffffffffffff821117156104d8576104d7610481565b5b80604052505050565b60006104eb610345565b90506104f782826104b0565b919050565b600067ffffffffffffffff82111561051757610516610481565b5b6105208261040b565b9050602081019050919050565b82818337600083830152505050565b600061054f61054a846104fc565b6104e1565b90508281526020810184848401111561056b5761056a61047c565b5b61057684828561052d565b509392505050565b600082601f83011261059357610592610477565b5b81356105a384826020860161053c565b91505092915050565b600080604083850312156105c3576105c261034f565b5b600083013567ffffffffffffffff8111156105e1576105e0610354565b5b6105ed8582860161057e565b925050602083013567ffffffffffffffff81111561060e5761060d610354565b5b61061a8582860161057e565b9150509250929050565b61062d81610359565b82525050565b60006020820190506106486000830184610624565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061069557607f821691505b6020821081036106a8576106a761064e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006106e882610359565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361071a576107196106ae565b5b60018201905091905056fea2646970667358221220d651721591e17a15d4e45ced5fcfb651cb9911f70ceb126b499f4b11ca2a6f9464736f6c634300080d0033"
bytecode
var address =""
var kvs = web3.eth.contract(abi)
var kvsr = kvs.new({from: eth.accounts[0],
 data: bytecode,
 gas: 0x2dc6c0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
minser.stop()
miner.stop()
kvsr
kvsr.setValue.sendTransaction("이것은 값 1입니다", "이것은 값 2입니다", {from:eth.accounts[0]})
eth.getTransaction("0x36cef1d3f3761746066afaadc36f9d72a1a497902a86b397c1f5530db94acfae")
miner.start(1)
eth.getTransaction("0x36cef1d3f3761746066afaadc36f9d72a1a497902a86b397c1f5530db94acfae")
miner.stop()
eth.getTransaction("0x36cef1d3f3761746066afaadc36f9d72a1a497902a86b397c1f5530db94acfae")
kvsr.getValue1.call(0)
kvsr.getValue1.call(1)
kvsr.getValue1.call(2)
kvsr.getValue2.call(0)
kvsr.setValue.sendTransaction("이것은 값 3입니다", "이것은 값 4입니다", {from:eth.accounts[0]})
miner.start(1)
miner.stop()
eth.getTransaction("0xb0b723be590bb73c0ab3beaf67d8cf600fa2a60f12f0551af39082a6ba6e61ab")
kvsr.getValue2.call(1)
kvsr.getValue1.call(1)
var abi = [{"inputs":[{"internalType":"bytes32","name":"user_id","type":"bytes32"},{"internalType":"bytes32","name":"project_id","type":"bytes32"}],"name":"getTransaction","outputs":[{"internalType":"string","name":"tran_data","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"user_id","type":"bytes32"},{"internalType":"bytes32","name":"project_id","type":"bytes32"},{"internalType":"string","name":"tran_data","type":"string"}],"name":"setTransaction","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"tranlog","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}]
var bytecode = "0x608060405234801561001057600080fd5b506106c0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063793e4cb6146100465780638613eebb14610076578063a6ba5def14610092575b600080fd5b610060600480360381019061005b919061038b565b6100c2565b60405161006d9190610464565b60405180910390f35b610090600480360381019061008b91906105bb565b61016f565b005b6100ac60048036038101906100a7919061038b565b6101e8565b6040516100b99190610464565b60405180910390f35b60006020528160005260406000206020528060005260406000206000915091505080546100ee90610659565b80601f016020809104026020016040519081016040528092919081815260200182805461011a90610659565b80156101675780601f1061013c57610100808354040283529160200191610167565b820191906000526020600020905b81548152906001019060200180831161014a57829003601f168201915b505050505081565b60008060008581526020019081526020016000206000848152602001908152602001600020805461019f90610659565b9050146101ab57600080fd5b80600080858152602001908152602001600020600084815260200190815260200160002090805190602001906101e292919061029e565b50505050565b60606000808481526020019081526020016000206000838152602001908152602001600020805461021890610659565b80601f016020809104026020016040519081016040528092919081815260200182805461024490610659565b80156102915780601f1061026657610100808354040283529160200191610291565b820191906000526020600020905b81548152906001019060200180831161027457829003601f168201915b5050505050905092915050565b8280546102aa90610659565b90600052602060002090601f0160209004810192826102cc5760008555610313565b82601f106102e557805160ff1916838001178555610313565b82800160010185558215610313579182015b828111156103125782518255916020019190600101906102f7565b5b5090506103209190610324565b5090565b5b8082111561033d576000816000905550600101610325565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61036881610355565b811461037357600080fd5b50565b6000813590506103858161035f565b92915050565b600080604083850312156103a2576103a161034b565b5b60006103b085828601610376565b92505060206103c185828601610376565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104055780820151818401526020810190506103ea565b83811115610414576000848401525b50505050565b6000601f19601f8301169050919050565b6000610436826103cb565b61044081856103d6565b93506104508185602086016103e7565b6104598161041a565b840191505092915050565b6000602082019050818103600083015261047e818461042b565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104c88261041a565b810181811067ffffffffffffffff821117156104e7576104e6610490565b5b80604052505050565b60006104fa610341565b905061050682826104bf565b919050565b600067ffffffffffffffff82111561052657610525610490565b5b61052f8261041a565b9050602081019050919050565b82818337600083830152505050565b600061055e6105598461050b565b6104f0565b90508281526020810184848401111561057a5761057961048b565b5b61058584828561053c565b509392505050565b600082601f8301126105a2576105a1610486565b5b81356105b284826020860161054b565b91505092915050565b6000806000606084860312156105d4576105d361034b565b5b60006105e286828701610376565b93505060206105f386828701610376565b925050604084013567ffffffffffffffff81111561061457610613610350565b5b6106208682870161058d565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061067157607f821691505b6020821081036106845761068361062a565b5b5091905056fea26469706673582212204df1a4d4744f6f55bf794210221cd1d722bfce5645d32b86a0658c22a167ec9964736f6c634300080d0033"
bytecode
abi
var address = ""
var txlogct = web3.eth.contract(abi)
txlogct
var txlog = txlogct.new( {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x2dc6c0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
eth.getTransaction("0x42a6b0266fef24cb6067a7d581fe134b99efef57"
)
eth.getTransaction("0x42a6b0266fef24cb6067a7d581fe134b99efef57")
txlog
eth.getTransction("0x90638d1fc110457b4b6b08aa603727c10d2746ee8054015284883dfabe1da8dd")
eth.getTransaction("0x90638d1fc110457b4b6b08aa603727c10d2746ee8054015284883dfabe1da8dd")
txlog.setTransaction.sendTransaction("USER000001", "PROJ00000001", "2022년 3월 31일 A가 B에게 10,000원 송금",{from:eth.accounts[0]})
miner.start(1)
miner.stop()
eth.getTransaction("0xb24e41242e07c21ec61c6cecf94a1c5a98304a71aeead7b6216df00ca7bbe857")
txlog.getTransaction.call("USER000001", "PROJ00000001")
txlog.setTransaction.sendTransaction("USER000001", "PROJ00000001", "abc")
txlog.setTransaction.sendTransaction("USER000001", "PROJ00000001", "abc", {from:eth.accounts[0]})
txlog.setTransaction.sendTransaction("USER000002", "PROJ00000001", "abc", {from:eth.accounts[0]})
miner.start(1)
miner.stop()
eth.getTransaction("0x6ae6af48473547dc1ae24966a07de7ed0b9f9b7b58520ffe790fe8f2809ebe2b")
txlog.getTransaction.call("USER000001", "PROJ00000001")
txlog.getTransaction.call("USER000002", "PROJ00000001")
eth.accounts
persona.newAccount("pass4")
eth.accounts
eth.sendTransaction({from:eth.accounts[0], to:eth.accounts[1], value: web.toWei(200, "ether")})
eth.sendTransaction({from:eth.accounts[0], to:eth.accounts[1], value: web3.toWei(200, "ether")})
eth.sendTransaction({from:eth.accounts[0], to:eth.accounts[2], value: web3.toWei(200, "ether")})
eth.sendTransaction({from:eth.accounts[0], to:eth.accounts[3], value: web3.toWei(200, "ether")})
eth.sendTransaction({from:eth.accounts[0], to:eth.accounts[4], value: web3.toWei(200, "ether")})
miner.start(1)
miner.stop()
eth.getBalance(eth.accounts[4])
var abi = [{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"_person","type":"address"}],"name":"getPerson","outputs":[{"internalType":"bool","name":"_allowReference","type":"bool"},{"internalType":"uint256","name":"_approveBlockNo","type":"uint256"},{"internalType":"uint256","name":"_refLimitBlockNo","type":"uint256"},{"internalType":"address","name":"_applicant","type":"address"},{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_birth","type":"string"},{"internalType":"address[]","name":"_orglist","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"orgDetail","outputs":[{"internalType":"string","name":"name","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_applicant","type":"address"},{"internalType":"uint256","name":"_span","type":"uint256"}],"name":"setApprove","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_persong","type":"address"}],"name":"setBelong","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"}],"name":"setOrganization","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_birth","type":"string"}],"name":"setPerson","outputs":[],"stateMutability":"nonpayable","type":"function"}]
var bytecode = ""
var address = ""
var pcsc = web3.eth.contract(abi)
var pc = pcsc.new({
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x2dc6c0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
minser.stop()
miner.stop()
miner.setEtherbash(eth.accounts[1])
miner.setEtherbase(eth.accounts[1])
pc
eth.coinbase
miner.setEtherbase(eth.accounts[2])
miner.setEtherbase(eth.accounts[4])
miner.setEtherbase(eth.accounts[3])
miner.setEtherbase(eth.accounts[0])
miner.setEtherbase(eth.accounts[3])
eth.getBlockNumber
eth.getBlockNumber()
eth.getBlockNumber
eth.getBlock
eth.getBlock()
eth.getBlockNumber
eth.blockNumber
eth.getBlock
eth.getBlock()
eth.getBlock
eth.blockNumber
eth.accounts
eth.getBalance("0x4d8364a1800d73a5ce9cc546fa3218869ce50c8f")
eth.accounts
eth.coinBase
eth.coinbase
var abi = [{"inputs":[{"internalType":"string","name":"g","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"greeting","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"say","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"g","type":"string"}],"name":"setGreeting","outputs":[],"stateMutability":"nonpayable","type":"function"}]
var bytecode = "0x60806040523480156200001157600080fd5b50604051620008c7380380620008c78339818101604052810190620000379190620002a4565b80600090805190602001906200004f92919062000057565b505062000359565b828054620000659062000324565b90600052602060002090601f016020900481019282620000895760008555620000d5565b82601f10620000a457805160ff1916838001178555620000d5565b82800160010185558215620000d5579182015b82811115620000d4578251825591602001919060010190620000b7565b5b509050620000e49190620000e8565b5090565b5b8082111562000103576000816000905550600101620000e9565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001708262000125565b810181811067ffffffffffffffff8211171562000192576200019162000136565b5b80604052505050565b6000620001a762000107565b9050620001b5828262000165565b919050565b600067ffffffffffffffff821115620001d857620001d762000136565b5b620001e38262000125565b9050602081019050919050565b60005b8381101562000210578082015181840152602081019050620001f3565b8381111562000220576000848401525b50505050565b60006200023d6200023784620001ba565b6200019b565b9050828152602081018484840111156200025c576200025b62000120565b5b62000269848285620001f0565b509392505050565b600082601f8301126200028957620002886200011b565b5b81516200029b84826020860162000226565b91505092915050565b600060208284031215620002bd57620002bc62000111565b5b600082015167ffffffffffffffff811115620002de57620002dd62000116565b5b620002ec8482850162000271565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200033d57607f821691505b602082108103620003535762000352620002f5565b5b50919050565b61055e80620003696000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063954ab4b214610046578063a413686214610064578063ef690cc014610080575b600080fd5b61004e61009e565b60405161005b9190610314565b60405180910390f35b61007e6004803603810190610079919061047f565b610130565b005b61008861014a565b6040516100959190610314565b60405180910390f35b6060600080546100ad906104f7565b80601f01602080910402602001604051908101604052809291908181526020018280546100d9906104f7565b80156101265780601f106100fb57610100808354040283529160200191610126565b820191906000526020600020905b81548152906001019060200180831161010957829003601f168201915b5050505050905090565b80600090805190602001906101469291906101d8565b5050565b60008054610157906104f7565b80601f0160208091040260200160405190810160405280929190818152602001828054610183906104f7565b80156101d05780601f106101a5576101008083540402835291602001916101d0565b820191906000526020600020905b8154815290600101906020018083116101b357829003601f168201915b505050505081565b8280546101e4906104f7565b90600052602060002090601f016020900481019282610206576000855561024d565b82601f1061021f57805160ff191683800117855561024d565b8280016001018555821561024d579182015b8281111561024c578251825591602001919060010190610231565b5b50905061025a919061025e565b5090565b5b8082111561027757600081600090555060010161025f565b5090565b600081519050919050565b600082825260208201905092915050565b60005b838110156102b557808201518184015260208101905061029a565b838111156102c4576000848401525b50505050565b6000601f19601f8301169050919050565b60006102e68261027b565b6102f08185610286565b9350610300818560208601610297565b610309816102ca565b840191505092915050565b6000602082019050818103600083015261032e81846102db565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61038c826102ca565b810181811067ffffffffffffffff821117156103ab576103aa610354565b5b80604052505050565b60006103be610336565b90506103ca8282610383565b919050565b600067ffffffffffffffff8211156103ea576103e9610354565b5b6103f3826102ca565b9050602081019050919050565b82818337600083830152505050565b600061042261041d846103cf565b6103b4565b90508281526020810184848401111561043e5761043d61034f565b5b610449848285610400565b509392505050565b600082601f8301126104665761046561034a565b5b813561047684826020860161040f565b91505092915050565b60006020828403121561049557610494610340565b5b600082013567ffffffffffffffff8111156104b3576104b2610345565b5b6104bf84828501610451565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061050f57607f821691505b602082108103610522576105216104c8565b5b5091905056fea2646970667358221220dc33c45ef12e205c3a518daf10698995abafa7117935447ef1efd22cfd5ae53364736f6c634300080d0033"
var address = ""
var simpleContract = web3.eth.contract(abi)
eth.unlockAccount(eth.accounts[0],"pass0",3000000)
var simple = simpleContract.new("Hello, ethereum", {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x2dc6c0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
eth.unlockAccount(eth.accounts[0],"pass0",3000000)
eth.accounts
eth.pendingTransactions
eth.unlockAccount(eth.accounts[0],"pass0",3000000)
eth.pendingTransactions
var abi = [{"inputs":[{"internalType":"string","name":"_contents","type":"string"},{"internalType":"uint256","name":"_goalNum","type":"uint256"},{"internalType":"uint256","name":"_deadline","type":"uint256"},{"internalType":"uint256","name":"_fee","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"mem","type":"address"}],"name":"joining","type":"event"},{"inputs":[],"name":"agent","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"contents","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"deadline","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getInfo","outputs":[{"internalType":"address","name":"_agent","type":"address"},{"internalType":"string","name":"_contents","type":"string"},{"internalType":"uint256","name":"_deadline","type":"uint256"},{"internalType":"uint256","name":"_goalNum","type":"uint256"},{"internalType":"uint256","name":"_fee","type":"uint256"},{"internalType":"address[]","name":"_members","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"goalNum","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"members","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nowNum","outputs":[{"internalType":"uint256","name":"number","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"remain","outputs":[{"internalType":"uint256","name":"min","type":"uint256"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}]
var bytecode = "0x60806040523480156200001157600080fd5b5060405162000f2038038062000f20833981810160405281019062000037919062000367565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600190805190602001906200008f929190620000df565b50603c826200009f919062000427565b42620000ac919062000488565b600281905550670de0b6b3a764000081620000c8919062000427565b600481905550826003819055505050505062000549565b828054620000ed9062000514565b90600052602060002090601f0160209004810192826200011157600085556200015d565b82601f106200012c57805160ff19168380011785556200015d565b828001600101855582156200015d579182015b828111156200015c5782518255916020019190600101906200013f565b5b5090506200016c919062000170565b5090565b5b808211156200018b57600081600090555060010162000171565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001f882620001ad565b810181811067ffffffffffffffff821117156200021a5762000219620001be565b5b80604052505050565b60006200022f6200018f565b90506200023d8282620001ed565b919050565b600067ffffffffffffffff82111562000260576200025f620001be565b5b6200026b82620001ad565b9050602081019050919050565b60005b83811015620002985780820151818401526020810190506200027b565b83811115620002a8576000848401525b50505050565b6000620002c5620002bf8462000242565b62000223565b905082815260208101848484011115620002e457620002e3620001a8565b5b620002f184828562000278565b509392505050565b600082601f830112620003115762000310620001a3565b5b815162000323848260208601620002ae565b91505092915050565b6000819050919050565b62000341816200032c565b81146200034d57600080fd5b50565b600081519050620003618162000336565b92915050565b6000806000806080858703121562000384576200038362000199565b5b600085015167ffffffffffffffff811115620003a557620003a46200019e565b5b620003b387828801620002f9565b9450506020620003c68782880162000350565b9350506040620003d98782880162000350565b9250506060620003ec8782880162000350565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000434826200032c565b915062000441836200032c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156200047d576200047c620003f8565b5b828202905092915050565b600062000495826200032c565b9150620004a2836200032c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620004da57620004d9620003f8565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200052d57607f821691505b602082108103620005435762000542620004e5565b5b50919050565b6109c780620005596000396000f3fe60806040526004361061008a5760003560e01c806385f980ba1161005957806385f980ba1461022a578063955c986714610255578063cac1ec6314610280578063ddca3f43146102ab578063f5ff5c76146102d657610162565b806329dcb0cf146101675780635a9b0b89146101925780635daf08ca146101c257806361f3c62e146101ff57610162565b366101625742600254111561016057600454341480156100b05750600580549050600354115b6100b957600080fd5b6005339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f28074385dbf4617758518e01a664dacbe39ad48b57ff8e90c5ae728d41c0464e60405160405180910390a25b005b600080fd5b34801561017357600080fd5b5061017c610301565b60405161018991906105b1565b60405180910390f35b34801561019e57600080fd5b506101a7610307565b6040516101b996959493929190610764565b60405180910390f35b3480156101ce57600080fd5b506101e960048036038101906101e49190610804565b610462565b6040516101f69190610831565b60405180910390f35b34801561020b57600080fd5b506102146104a1565b60405161022191906105b1565b60405180910390f35b34801561023657600080fd5b5061023f6104cd565b60405161024c91906105b1565b60405180910390f35b34801561026157600080fd5b5061026a6104d3565b604051610277919061084c565b60405180910390f35b34801561028c57600080fd5b50610295610561565b6040516102a291906105b1565b60405180910390f35b3480156102b757600080fd5b506102c061056e565b6040516102cd91906105b1565b60405180910390f35b3480156102e257600080fd5b506102eb610574565b6040516102f89190610831565b60405180910390f35b60025481565b600060606000806000606060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff169550600180546103429061089d565b80601f016020809104026020016040519081016040528092919081815260200182805461036e9061089d565b80156103bb5780601f10610390576101008083540402835291602001916103bb565b820191906000526020600020905b81548152906001019060200180831161039e57829003601f168201915b50505050509450600254935060035492506004549150600580548060200260200160405190810160405280929190818152602001828054801561045357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610409575b50505050509050909192939495565b6005818154811061047257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006002544210156104ca57603c426002546104bd91906108fd565b6104c79190610960565b90505b90565b60035481565b600180546104e09061089d565b80601f016020809104026020016040519081016040528092919081815260200182805461050c9061089d565b80156105595780601f1061052e57610100808354040283529160200191610559565b820191906000526020600020905b81548152906001019060200180831161053c57829003601f168201915b505050505081565b6000600580549050905090565b60045481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000819050919050565b6105ab81610598565b82525050565b60006020820190506105c660008301846105a2565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105f7826105cc565b9050919050565b610607816105ec565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561064757808201518184015260208101905061062c565b83811115610656576000848401525b50505050565b6000601f19601f8301169050919050565b60006106788261060d565b6106828185610618565b9350610692818560208601610629565b61069b8161065c565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6106db816105ec565b82525050565b60006106ed83836106d2565b60208301905092915050565b6000602082019050919050565b6000610711826106a6565b61071b81856106b1565b9350610726836106c2565b8060005b8381101561075757815161073e88826106e1565b9750610749836106f9565b92505060018101905061072a565b5085935050505092915050565b600060c08201905061077960008301896105fe565b818103602083015261078b818861066d565b905061079a60408301876105a2565b6107a760608301866105a2565b6107b460808301856105a2565b81810360a08301526107c68184610706565b9050979650505050505050565b600080fd5b6107e181610598565b81146107ec57600080fd5b50565b6000813590506107fe816107d8565b92915050565b60006020828403121561081a576108196107d3565b5b6000610828848285016107ef565b91505092915050565b600060208201905061084660008301846105fe565b92915050565b60006020820190508181036000830152610866818461066d565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806108b557607f821691505b6020821081036108c8576108c761086e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061090882610598565b915061091383610598565b925082821015610926576109256108ce565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061096b82610598565b915061097683610598565b92508261098657610985610931565b5b82820490509291505056fea264697066735822122051feabf05cd2fe81eab22aa70c1c2ee5d096f0401e7ab8a1140c4eb98941bd5064736f6c634300080d0033"
var address = ""
var oneContract = web3.eth.contract(abi)
web3.toWei(eth.getBalance(eth.accounts[0]), "ether")
web3.fromWei(eth.getBalance(eth.accounts[0]), "ether")
web3.fromWei(eth.getBalance(eth.accounts[1]), "ether")
web3.fromWei(eth.getBalance(eth.accounts[2]), "ether")
web3.fromWei(eth.getBalance(eth.accounts[3]), "ether")
web3.fromWei(eth.getBalance(eth.accounts[4]), "ether")
web3.fromWei(eth.getBalance(eth.accounts[5]), "ether")
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x1388
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x186a0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x30d40
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x249f0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x1adb0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x1d4c0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x1c138
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x1b198
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x1b580
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x1b38c
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
eth.pendingTransactions
miner.start(1)
miner.stop()
eth.pendingTransactions
eth.getBalance(eth.accounts[0])
web3.fromWei(eth.getBalance(eth.accounts[0]), "ether")
one
var abi = [{"inputs":[{"internalType":"string","name":"_contents","type":"string"},{"internalType":"uint256","name":"_goalNum","type":"uint256"},{"internalType":"uint256","name":"_deadline","type":"uint256"},{"internalType":"uint256","name":"_fee","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"mem","type":"address"}],"name":"joining","type":"event"},{"inputs":[],"name":"agent","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"contents","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"deadline","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getInfo","outputs":[{"internalType":"address","name":"_agent","type":"address"},{"internalType":"string","name":"_contents","type":"string"},{"internalType":"uint256","name":"_deadline","type":"uint256"},{"internalType":"uint256","name":"_goalNum","type":"uint256"},{"internalType":"uint256","name":"_fee","type":"uint256"},{"internalType":"address[]","name":"_members","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"goalNum","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"members","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nowNum","outputs":[{"internalType":"uint256","name":"number","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"remain","outputs":[{"internalType":"uint256","name":"min","type":"uint256"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}]
var bytecode = "0x60806040523480156200001157600080fd5b5060405162000f2038038062000f20833981810160405281019062000037919062000367565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600190805190602001906200008f929190620000df565b50603c826200009f919062000427565b42620000ac919062000488565b600281905550670de0b6b3a764000081620000c8919062000427565b600481905550826003819055505050505062000549565b828054620000ed9062000514565b90600052602060002090601f0160209004810192826200011157600085556200015d565b82601f106200012c57805160ff19168380011785556200015d565b828001600101855582156200015d579182015b828111156200015c5782518255916020019190600101906200013f565b5b5090506200016c919062000170565b5090565b5b808211156200018b57600081600090555060010162000171565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001f882620001ad565b810181811067ffffffffffffffff821117156200021a5762000219620001be565b5b80604052505050565b60006200022f6200018f565b90506200023d8282620001ed565b919050565b600067ffffffffffffffff82111562000260576200025f620001be565b5b6200026b82620001ad565b9050602081019050919050565b60005b83811015620002985780820151818401526020810190506200027b565b83811115620002a8576000848401525b50505050565b6000620002c5620002bf8462000242565b62000223565b905082815260208101848484011115620002e457620002e3620001a8565b5b620002f184828562000278565b509392505050565b600082601f830112620003115762000310620001a3565b5b815162000323848260208601620002ae565b91505092915050565b6000819050919050565b62000341816200032c565b81146200034d57600080fd5b50565b600081519050620003618162000336565b92915050565b6000806000806080858703121562000384576200038362000199565b5b600085015167ffffffffffffffff811115620003a557620003a46200019e565b5b620003b387828801620002f9565b9450506020620003c68782880162000350565b9350506040620003d98782880162000350565b9250506060620003ec8782880162000350565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000434826200032c565b915062000441836200032c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156200047d576200047c620003f8565b5b828202905092915050565b600062000495826200032c565b9150620004a2836200032c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620004da57620004d9620003f8565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200052d57607f821691505b602082108103620005435762000542620004e5565b5b50919050565b6109c780620005596000396000f3fe60806040526004361061008a5760003560e01c806385f980ba1161005957806385f980ba1461022a578063955c986714610255578063cac1ec6314610280578063ddca3f43146102ab578063f5ff5c76146102d657610162565b806329dcb0cf146101675780635a9b0b89146101925780635daf08ca146101c257806361f3c62e146101ff57610162565b366101625742600254111561016057600454341480156100b05750600580549050600354115b6100b957600080fd5b6005339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f28074385dbf4617758518e01a664dacbe39ad48b57ff8e90c5ae728d41c0464e60405160405180910390a25b005b600080fd5b34801561017357600080fd5b5061017c610301565b60405161018991906105b1565b60405180910390f35b34801561019e57600080fd5b506101a7610307565b6040516101b996959493929190610764565b60405180910390f35b3480156101ce57600080fd5b506101e960048036038101906101e49190610804565b610462565b6040516101f69190610831565b60405180910390f35b34801561020b57600080fd5b506102146104a1565b60405161022191906105b1565b60405180910390f35b34801561023657600080fd5b5061023f6104cd565b60405161024c91906105b1565b60405180910390f35b34801561026157600080fd5b5061026a6104d3565b604051610277919061084c565b60405180910390f35b34801561028c57600080fd5b50610295610561565b6040516102a291906105b1565b60405180910390f35b3480156102b757600080fd5b506102c061056e565b6040516102cd91906105b1565b60405180910390f35b3480156102e257600080fd5b506102eb610574565b6040516102f89190610831565b60405180910390f35b60025481565b600060606000806000606060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff169550600180546103429061089d565b80601f016020809104026020016040519081016040528092919081815260200182805461036e9061089d565b80156103bb5780601f10610390576101008083540402835291602001916103bb565b820191906000526020600020905b81548152906001019060200180831161039e57829003601f168201915b50505050509450600254935060035492506004549150600580548060200260200160405190810160405280929190818152602001828054801561045357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610409575b50505050509050909192939495565b6005818154811061047257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006002544210156104ca57603c426002546104bd91906108fd565b6104c79190610960565b90505b90565b60035481565b600180546104e09061089d565b80601f016020809104026020016040519081016040528092919081815260200182805461050c9061089d565b80156105595780601f1061052e57610100808354040283529160200191610559565b820191906000526020600020905b81548152906001019060200180831161053c57829003601f168201915b505050505081565b6000600580549050905090565b60045481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000819050919050565b6105ab81610598565b82525050565b60006020820190506105c660008301846105a2565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105f7826105cc565b9050919050565b610607816105ec565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561064757808201518184015260208101905061062c565b83811115610656576000848401525b50505050565b6000601f19601f8301169050919050565b60006106788261060d565b6106828185610618565b9350610692818560208601610629565b61069b8161065c565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6106db816105ec565b82525050565b60006106ed83836106d2565b60208301905092915050565b6000602082019050919050565b6000610711826106a6565b61071b81856106b1565b9350610726836106c2565b8060005b8381101561075757815161073e88826106e1565b9750610749836106f9565b92505060018101905061072a565b5085935050505092915050565b600060c08201905061077960008301896105fe565b818103602083015261078b818861066d565b905061079a60408301876105a2565b6107a760608301866105a2565b6107b460808301856105a2565b81810360a08301526107c68184610706565b9050979650505050505050565b600080fd5b6107e181610598565b81146107ec57600080fd5b50565b6000813590506107fe816107d8565b92915050565b60006020828403121561081a576108196107d3565b5b6000610828848285016107ef565b91505092915050565b600060208201905061084660008301846105fe565b92915050565b60006020820190508181036000830152610866818461066d565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806108b557607f821691505b6020821081036108c8576108c761086e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061090882610598565b915061091383610598565b925082821015610926576109256108ce565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061096b82610598565b915061097683610598565b92508261098657610985610931565b5b82820490509291505056fea264697066735822122051feabf05cd2fe81eab22aa70c1c2ee5d096f0401e7ab8a1140c4eb98941bd5064736f6c634300080d0033"
var address = ""
var oneContract = web3.eth.contract(abi)
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x1b580
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x1c138
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x1d4c0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
eth.pendingTransactions
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x249f0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x249f0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e.printStackTrace());
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
eth.pendingTransactions
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x30d40
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
minert.start(1)
miner.start(1)
miner.stop()
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x493e0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x61a80
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x7a120
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x927c0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xf4240
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xc3500
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xaae60
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
eth.getBlock("latest").gasLimit
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xb71b0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.stop()
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xb98c0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xb8538
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xb90f0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xb8d08
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
web3.fromWei(eth.getBalance(eth.accounts[0]), "ether")
web3.fromWei(eth.getBalance(eth.accounts[1]), "ether")
web3.fromWei(eth.getBalance(eth.accounts[2]), "ether")
eth.sendTransaction({from:eth.accounts[1], to:"0xb8f6bd75873c19239bde6b65d64c6d33e669ef94", value:web3.toWei(1,"ether"), gas:0x3e8})
eth.sendTransaction({from:eth.accounts[1], to:"0xb8f6bd75873c19239bde6b65d64c6d33e669ef94", value:web3.toWei(1,"ether"), gas:0x2710})
eth.sendTransaction({from:eth.accounts[1], to:"0xb8f6bd75873c19239bde6b65d64c6d33e669ef94", value:web3.toWei(1,"ether"), gas:0xc350})
eth.sendTransaction({from:eth.accounts[2], to:"0xb8f6bd75873c19239bde6b65d64c6d33e669ef94", value:web3.toWei(1,"ether"), gas:0x7530})
miner.start(1)
eth.pendingTransactions
miner.stop()
one.agent()
one.agent.call()
one.getInfo()
one
one.getInfo()
var one = eth.contract(abi).at("0xb8f6bd75873c19239bde6b65d64c6d33e669ef94")
one
one.getInfo()
one.agent.call()
one.members.call()
one.nowNum()
var one = web3.eth.contract(abi).at("0xb8f6bd75873c19239bde6b65d64c6d33e669ef94")
one
one.getInfo.call()
one.remain()
one.remain
one.remain.call()
eth.getTransaction("0xf4b4f77158f7b7ca22a17943fac3cb897b57987829ec20ed8688095b06b228bf")
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xb8d08
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
minert.start(1)
miner.start(1)
miner.stop()
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xb90f0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop
miner.stop()
one
one.agent.call()
one.getInfo.call()
one.remain.call()
eth.sendTransaction({from:eth.accounts[1], to:"0xa8fe8a75fcccadbca5c0b664ea6eb5a469b057fc", value:web3.toWei(1,"ether"), gas:0x3e8})
eth.sendTransaction({from:eth.accounts[1], to:"0xa8fe8a75fcccadbca5c0b664ea6eb5a469b057fc", value:web3.toWei(1,"ether"), gas:0x4e20})
eth.sendTransaction({from:eth.accounts[1], to:"0xa8fe8a75fcccadbca5c0b664ea6eb5a469b057fc", value:web3.toWei(1,"ether"), gas:0x61a8})
eth.sendTransaction({from:eth.accounts[2], to:"0xa8fe8a75fcccadbca5c0b664ea6eb5a469b057fc", value:web3.toWei(1,"ether"), gas:0x5208})
eth.sendTransaction({from:eth.accounts[3], to:"0xa8fe8a75fcccadbca5c0b664ea6eb5a469b057fc", value:web3.toWei(1,"ether"), gas:0x5208})
miner.start(1)
eth.pendingTransaction
miner.stop()
one.getInfo.call()
miner.start(1)
eth.sendTransaction({from:eth.accounts[1], to:"0xa8fe8a75fcccadbca5c0b664ea6eb5a469b057fc", value:web3.toWei(1,"ether"), gas:0x5208})
eth.pendingTransaction
eth.pendingTransaction()
one.getInfo.call()
miner.stop()
one.remain.call()
one.members.call()
one.members
one.remain.call()
eth.sendTransaction({from:eth.accounts[1], to:"0xa8fe8a75fcccadbca5c0b664ea6eb5a469b057fc", value:web3.toWei(1,"ether"), gas:0x5014})
one.remain.call()
eth.sendTransaction({from:eth.accounts[1], to:"0xa8fe8a75fcccadbca5c0b664ea6eb5a469b057fc", value:web3.toWei(1,"ether"), gas:0x5014}, function(e) {if(e){console.log(e);}})
eth.sendTransaction({from:eth.accounts[1], to:"0xa8fe8a75fcccadbca5c0b664ea6eb5a469b057fc", value:web3.toWei(1,"ether"), gas:0x5208}, function(e) {if(e){console.log(e);}})
eth.pendingTransactions
miner.start(1)
eth.pendingTransactions
miner.stop()
one.getInfo.call()
one.remain.call()
web3.fromWei(eth.getBalance(eth.accounts[0]), "ether")
web3.fromWei(eth.getBalance(eth.accounts[1]), "ether")
eth.coinbase(eth.accounts[1])
miner.setEtherbase(eth.accounts[1])
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xb90f0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
miner.setEtherbase(eth.accounts[2])
one.remain.call()
web3.fromWei(eth.getBalance(eth.accounts[0]), "ether")
web3.fromWei(eth.getBalance(eth.accounts[1]), "ether")
eth.sendTransaction({from:eth.accounts[1], to:"0x966fa4485dfaa48a607a11393d51b1207080f7b3", value:web3.toWei(1,"ether"), gas:0x5208})
web3.fromWei(eth.getBalance(eth.accounts[1]), "ether")
eth.pendingTransactions
miner.start(1)
eth.pendingTransactions
miner.stop()
web3.fromWei(eth.getBalance(eth.accounts[1]), "ether")
eth.sendTransaction({from:eth.accounts[1], to:"0x966fa4485dfaa48a607a11393d51b1207080f7b3", value:web3.toWei(1,"ether")})
miner.start(1)
miner.stop()
eth.pendingTransactions
web3.fromWei(eth.getBalance(eth.accounts[1]), "ether")
one.getInfo()
one.getInfo.call()
eth.getTransaction("0xfdd87ab7700c5f6561c2f66974755c27866afa5a5c13679cc4345dd0a2bff2ae")
web3.fromWei(eth.getBalance(eth.accounts[1]), "ether")
eth.getBalance(eth.accounts[1])
eth.getBalance(eth.accounts[0])
web3.fromWei(eth.getBalance(eth.accounts[0]), "ether")
eth.coinbase
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xb90f0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
one.getInfo.call()
web3.fromWei(eth.getBalance(eth.accounts[0]), "ether")
eth.getBalance(eth.accounts[0])
one.remain.call()
one.getInfo.call()
one.remain.call()
eth.coinbase
eth.acount
eth.account
eth.accounts
miner.setEtherbase(eth.accounts[3])
eth.coinbse
eth.coinbase\
eth.coinbase
one
one.remain.call()
one.getInfo.call()
eth.sendTransaction({from:eth.accounts[1], to:"0x7626e7f25d541fb4aba4b0dfa0807e6d8e04bf22", value:web3.toWei(1,"ether"), gas:0x106cf})
web3.fromWei(eth.getBalance(eth.accounts[0]), "ether")
web3.fromWei(eth.getBalance(eth.accounts[1]), "ether")
miner.start(1)
miner.stop()
web3.fromWei(eth.getBalance(eth.accounts[1]), "ether")
web3.fromWei(eth.getBalance(eth.accounts[2]), "ether")
eth.sendTransaction({from:eth.accounts[2], to:"0x7626e7f25d541fb4aba4b0dfa0807e6d8e04bf22", value:web3.toWei(1,"ether")})
web3.fromWei(eth.getBalance(eth.accounts[2]), "ether")
miner.start(1)
miner.stop()
web3.fromWei(eth.getBalance(eth.accounts[2]), "ether")
one.getInfo()
one.getInfo.call()
one.remain.call()
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xb90f0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
one.remain.call()
one.getInfo.call()
> one.getInfo.call()
eth.sendTransaction({from:eth.accounts[1], to:"0xeeb211e4a3bfe436986861e1e5c0d18d8304ba92", value:web3.toWei(1,"ether")})
miner.start(1)
miner.stop()
one.getInfo.call()
web3.fromWei(eth.getBalance(eth.accounts[1]), "ether")
web3.fromWei(eth.getBalance(eth.accounts[2]), "ether")
eth.sendTransaction({from:eth.accounts[2], to:"0xeeb211e4a3bfe436986861e1e5c0d18d8304ba92", value:web3.toWei(1,"ether")})
miner.start(1)
miner.stop()
one.getInfo.call()
web3.fromWei(eth.getBalance(eth.accounts[2]), "ether")
eth.getTransaction("0xc61f2bc07bfbf8f6c07a392f9e3cbc543220ad56eb3762a711cfe9f5a5a2d561"
)
eth.getTransaction("0xa382b198b4c2f897e7e2fff32b3738d93a81b31f06743e5a0c3befc345433c05")
eth.getTransaction("0xe3b6fbac77a77d1cf68da4930bf15cdad01f3883d287f029d7fd7232ed8a1cbf")
var one = oneContract.new("52D000D66E68743772A7727C6EF43F18C2EA65817C989A67EFB2F2CE708C1C18", 2, 10, 1, {
 from: eth.accounts[1],
 data: bytecode,
 gas: 0xb90f0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
eth.getBalance(eth.accounts[1])
web3.fromWei(eth.getBalance(eth.accounts[1]), "ether")
miner.start(1)
miner.stop()
eth.getBalance(eth.accounts[1])
web3.fromWei(eth.getBalance(eth.accounts[1]), "ether")
eth.getBalance(eth.accounts[0])
web3.fromWei(eth.getBalance(eth.accounts[0]), "ether")
eth.sendTransaction({from:eth.accounts[0], to:"0x414825560fbb95deab876f51d3178bc2d771142d", value:web3.toWei(1,"ether")})
one.getInfo.call()
miner.start(1)
miner.stop()
one.getInfo.call()
web3.fromWei(eth.getBalance(eth.accounts[0]), "ether")
eth.getBalance(eth.accounts[0])
eth.getBalance(eth.accounts[2])
web3.fromWei(eth.getBalance(eth.accounts[2]), "ether")
eth.sendTransaction({from:eth.accounts[2], to:"0x414825560fbb95deab876f51d3178bc2d771142d", value:web3.toWei(1,"ether")})
miner.start(1)
miner.stop()
one.getInfo.call()
web3.fromWei(eth.getBalance(eth.accounts[2]), "ether")
eth.getBalance(eth.accounts[2])
var abi = [{"inputs":[{"internalType":"string","name":"_time","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"address","name":"mem","type":"address"}],"name":"joining","type":"event"},{"inputs":[{"internalType":"address","name":"_agent","type":"address"},{"internalType":"string","name":"_contents","type":"string"},{"internalType":"uint256","name":"_goalNum","type":"uint256"},{"internalType":"uint256","name":"_deadline","type":"uint256"},{"internalType":"uint256","name":"_fee","type":"uint256"}],"name":"addCa","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"admin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"calist","outputs":[{"internalType":"string","name":"contents","type":"string"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"goalNum","type":"uint256"},{"internalType":"uint256","name":"fee","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"endTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_agent","type":"address"}],"name":"getInfo","outputs":[{"internalType":"string","name":"_contents","type":"string"},{"internalType":"uint256","name":"_deadline","type":"uint256"},{"internalType":"uint256","name":"_goalNum","type":"uint256"},{"internalType":"uint256","name":"_fee","type":"uint256"},{"internalType":"address[]","name":"_members","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_agent","type":"address"}],"name":"join","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_agent","type":"address"}],"name":"nowNum","outputs":[{"internalType":"uint256","name":"number","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_agent","type":"address"}],"name":"remain","outputs":[{"internalType":"uint256","name":"min","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"time","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}]
var bytecode = "0x60806040523480156200001157600080fd5b506040516200149e3803806200149e8339818101604052810190620000379190620002fa565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600190805190602001906200008f929190620000ad565b5061025842620000a0919062000384565b6003819055505062000445565b828054620000bb9062000410565b90600052602060002090601f016020900481019282620000df57600085556200012b565b82601f10620000fa57805160ff19168380011785556200012b565b828001600101855582156200012b579182015b828111156200012a5782518255916020019190600101906200010d565b5b5090506200013a91906200013e565b5090565b5b80821115620001595760008160009055506001016200013f565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001c6826200017b565b810181811067ffffffffffffffff82111715620001e857620001e76200018c565b5b80604052505050565b6000620001fd6200015d565b90506200020b8282620001bb565b919050565b600067ffffffffffffffff8211156200022e576200022d6200018c565b5b62000239826200017b565b9050602081019050919050565b60005b838110156200026657808201518184015260208101905062000249565b8381111562000276576000848401525b50505050565b6000620002936200028d8462000210565b620001f1565b905082815260208101848484011115620002b257620002b162000176565b5b620002bf84828562000246565b509392505050565b600082601f830112620002df57620002de62000171565b5b8151620002f18482602086016200027c565b91505092915050565b60006020828403121562000313576200031262000167565b5b600082015167ffffffffffffffff8111156200033457620003336200016c565b5b6200034284828501620002c7565b91505092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000391826200034b565b91506200039e836200034b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620003d657620003d562000355565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200042957607f821691505b6020821081036200043f576200043e620003e1565b5b50919050565b61104980620004556000396000f3fe6080604052600436106100865760003560e01c80636f17d701116100595780636f17d70114610126578063c9d8411214610163578063ea4a3b08146101a0578063f851a440146101e0578063ffdd5cf11461020b57610086565b806316ada5471461008b57806328ffe6c8146100b65780633197cbb6146100d257806366b30dd2146100fd575b600080fd5b34801561009757600080fd5b506100a061024c565b6040516100ad91906109be565b60405180910390f35b6100d060048036038101906100cb9190610a52565b6102da565b005b3480156100de57600080fd5b506100e7610421565b6040516100f49190610a98565b60405180910390f35b34801561010957600080fd5b50610124600480360381019061011f9190610c14565b610427565b005b34801561013257600080fd5b5061014d60048036038101906101489190610a52565b610524565b60405161015a9190610a98565b60405180910390f35b34801561016f57600080fd5b5061018a60048036038101906101859190610a52565b6105d2565b6040516101979190610a98565b60405180910390f35b3480156101ac57600080fd5b506101c760048036038101906101c29190610a52565b610621565b6040516101d79493929190610cab565b60405180910390f35b3480156101ec57600080fd5b506101f56106d9565b6040516102029190610d06565b60405180910390f35b34801561021757600080fd5b50610232600480360381019061022d9190610a52565b6106fd565b604051610243959493929190610ddf565b60405180910390f35b6001805461025990610e6f565b80601f016020809104026020016040519081016040528092919081815260200182805461028590610e6f565b80156102d25780601f106102a7576101008083540402835291602001916102d2565b820191906000526020600020905b8154815290600101906020018083116102b557829003601f168201915b505050505081565b42600354111561041e576000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090504281600101541161033757600080fd5b806003015434148015610354575080600401805490508160020154115b61035d57600080fd5b80600401339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f19e9dc198c3427e485d3727aecce7ba7f1ee57f5c645dfb84ff3779f49d002f460405160405180910390a3505b50565b60035481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361051d576000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050848160000190805190602001906104d5929190610882565b50603c836104e39190610ecf565b426104ee9190610f29565b8160010181905550838160020181905550670de0b6b3a7640000826105139190610ecf565b8160030181905550505b5050505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101544210156105cd57603c42600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546105c09190610f7f565b6105ca9190610fe2565b90505b919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401805490509050919050565b600260205280600052604060002060009150905080600001805461064490610e6f565b80601f016020809104026020016040519081016040528092919081815260200182805461067090610e6f565b80156106bd5780601f10610692576101008083540402835291602001916106bd565b820191906000526020600020905b8154815290600101906020018083116106a057829003601f168201915b5050505050908060010154908060020154908060030154905084565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600080600060606000600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080600001805461075890610e6f565b80601f016020809104026020016040519081016040528092919081815260200182805461078490610e6f565b80156107d15780601f106107a6576101008083540402835291602001916107d1565b820191906000526020600020905b8154815290600101906020018083116107b457829003601f168201915b505050505095508060010154945080600201549350806003015492508060040180548060200260200160405190810160405280929190818152602001828054801561087157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610827575b505050505091505091939590929450565b82805461088e90610e6f565b90600052602060002090601f0160209004810192826108b057600085556108f7565b82601f106108c957805160ff19168380011785556108f7565b828001600101855582156108f7579182015b828111156108f65782518255916020019190600101906108db565b5b5090506109049190610908565b5090565b5b80821115610921576000816000905550600101610909565b5090565b600081519050919050565b600082825260208201905092915050565b60005b8381101561095f578082015181840152602081019050610944565b8381111561096e576000848401525b50505050565b6000601f19601f8301169050919050565b600061099082610925565b61099a8185610930565b93506109aa818560208601610941565b6109b381610974565b840191505092915050565b600060208201905081810360008301526109d88184610985565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a1f826109f4565b9050919050565b610a2f81610a14565b8114610a3a57600080fd5b50565b600081359050610a4c81610a26565b92915050565b600060208284031215610a6857610a676109ea565b5b6000610a7684828501610a3d565b91505092915050565b6000819050919050565b610a9281610a7f565b82525050565b6000602082019050610aad6000830184610a89565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610af582610974565b810181811067ffffffffffffffff82111715610b1457610b13610abd565b5b80604052505050565b6000610b276109e0565b9050610b338282610aec565b919050565b600067ffffffffffffffff821115610b5357610b52610abd565b5b610b5c82610974565b9050602081019050919050565b82818337600083830152505050565b6000610b8b610b8684610b38565b610b1d565b905082815260208101848484011115610ba757610ba6610ab8565b5b610bb2848285610b69565b509392505050565b600082601f830112610bcf57610bce610ab3565b5b8135610bdf848260208601610b78565b91505092915050565b610bf181610a7f565b8114610bfc57600080fd5b50565b600081359050610c0e81610be8565b92915050565b600080600080600060a08688031215610c3057610c2f6109ea565b5b6000610c3e88828901610a3d565b955050602086013567ffffffffffffffff811115610c5f57610c5e6109ef565b5b610c6b88828901610bba565b9450506040610c7c88828901610bff565b9350506060610c8d88828901610bff565b9250506080610c9e88828901610bff565b9150509295509295909350565b60006080820190508181036000830152610cc58187610985565b9050610cd46020830186610a89565b610ce16040830185610a89565b610cee6060830184610a89565b95945050505050565b610d0081610a14565b82525050565b6000602082019050610d1b6000830184610cf7565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610d5681610a14565b82525050565b6000610d688383610d4d565b60208301905092915050565b6000602082019050919050565b6000610d8c82610d21565b610d968185610d2c565b9350610da183610d3d565b8060005b83811015610dd2578151610db98882610d5c565b9750610dc483610d74565b925050600181019050610da5565b5085935050505092915050565b600060a0820190508181036000830152610df98188610985565b9050610e086020830187610a89565b610e156040830186610a89565b610e226060830185610a89565b8181036080830152610e348184610d81565b90509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e8757607f821691505b602082108103610e9a57610e99610e40565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610eda82610a7f565b9150610ee583610a7f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f1e57610f1d610ea0565b5b828202905092915050565b6000610f3482610a7f565b9150610f3f83610a7f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610f7457610f73610ea0565b5b828201905092915050565b6000610f8a82610a7f565b9150610f9583610a7f565b925082821015610fa857610fa7610ea0565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610fed82610a7f565b9150610ff883610a7f565b92508261100857611007610fb3565b5b82820490509291505056fea2646970667358221220f8fcb563fc0c5162c6e94535c6f95ab4ed1b67f9299c38c1fd78f1cca637894064736f6c634300080d0033"
var address = ""
var moreContract = web3.eth.contract(abi)
moreContract
eth.coinbase
eth.accounts
miner.setEtherbase(eth.accounts[3])
eth.coinbase
var more = moreContract.new("6C979FA9504CF6EABC046A8820586CDC7CD018599B5B3076FC960B20BC8FFE13", {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xb90f0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
var more = moreContract.new("6C979FA9504CF6EABC046A8820586CDC7CD018599B5B3076FC960B20BC8FFE13", {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xc3500
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
var more = moreContract.new("6C979FA9504CF6EABC046A8820586CDC7CD018599B5B3076FC960B20BC8FFE13", {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xc3500
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
var more = moreContract.new("6C979FA9504CF6EABC046A8820586CDC7CD018599B5B3076FC960B20BC8FFE13", {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xf4240
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
var more = moreContract.new("6C979FA9504CF6EABC046A8820586CDC7CD018599B5B3076FC960B20BC8FFE13", {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x1e8480
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
eth.getTransaction("0xf2cc6e7df5bcd32adf29d41edda614d700bd326343846b710966d25badaad3fd")
eth.getBalance(eth.accounts[0])
web3.fromWei(eth.getBalance(eth.accounts[0]), "ether")
var more = moreContract.new("6C979FA9504CF6EABC046A8820586CDC7CD018599B5B3076FC960B20BC8FFE13", {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x1e8480
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
web3.fromWei(eth.getBalance(eth.accounts[0]), "ether")
var more = moreContract.new("6C979FA9504CF6EABC046A8820586CDC7CD018599B5B3076FC960B20BC8FFE13", {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x10c8e0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
more.admin.call()
eth.accounts
more.addCa.sendTransaction("0x5894d987cfc846830b693378d3676899ed7015d5", "AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 2, 10, 1, {from:eth.accounts[0]})
web3.fromWei(eth.getBalance(eth.accounts[0]), "ether")
miner.start(1)
miner.stop()
web3.fromWei(eth.getBalance(eth.accounts[0]), "ether")
eth.getTransaction("0x9fb167bfa252d858d1c2fff41da7cb33b9ed8fbf545a0efb13fc242f80041af1")
more.addCa.sendTransaction("0xdc4bc3f8094bf072a44685587556fe4cf65f1fae", "52D000D66E68743772A7727C6EF43F18C2EA65817C989A67EFB2F2CE708C1C18", 2, 10, 1, {from:eth.accounts[0]})
miner.start(1)
miner.stop()
eth.getTransaction("0x1af8b142bf0b553c509281947917961c450945ab5794fd5c463b998d708b0914")
more.getInfo.call("0xdc4bc3f8094bf072a44685587556fe4cf65f1fae")
web3.fromWei(eth.getBalance(eth.accounts[1]), "ether")
more.join.sendTransaction("0xdc4bc3f8094bf072a44685587556fe4cf65f1fae", {from:eth.accounts[1], value:web3.toWei(1,"ether")})
more
more.join.sendTransaction("0xdc4bc3f8094bf072a44685587556fe4cf65f1fae", {from:eth.accounts[1], value:web3.toWei(1,"ether")})
more.join.sendTransaction("0xdc4bc3f8094bf072a44685587556fe4cf65f1fae", {from:eth.accounts[1], to:"0x866d2b8d6751e61c56cc08be47cfb569b0f5e53b", value:web3.toWei(1,"ether")})
var abi = [{"inputs":[{"internalType":"string","name":"_contents","type":"string"},{"internalType":"uint256","name":"_goalNum","type":"uint256"},{"internalType":"uint256","name":"_deadline","type":"uint256"},{"internalType":"uint256","name":"_fee","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"mem","type":"address"}],"name":"joining","type":"event"},{"inputs":[],"name":"agent","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"contents","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"deadline","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getInfo","outputs":[{"internalType":"address","name":"_agent","type":"address"},{"internalType":"string","name":"_contents","type":"string"},{"internalType":"uint256","name":"_deadline","type":"uint256"},{"internalType":"uint256","name":"_goalNum","type":"uint256"},{"internalType":"uint256","name":"_fee","type":"uint256"},{"internalType":"address[]","name":"_members","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"goalNum","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"members","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nowNum","outputs":[{"internalType":"uint256","name":"number","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"remain","outputs":[{"internalType":"uint256","name":"min","type":"uint256"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}]
abi
var more = moreContract.new("6C979FA9504CF6EABC046A8820586CDC7CD018599B5B3076FC960B20BC8FFE13", {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x10c8e0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
more.addCa.sendTransaction("0x89f2fbf63ec523b57fb0e2e8af689695b9b69aa7", "52D000D66E68743772A7727C6EF43F18C2EA65817C989A67EFB2F2CE708C1C18", 2, 10, 1, {from:eth.accounts[0]})
miner.start(1)
miner.stop()
more.getInfo.call("0x89f2fbf63ec523b57fb0e2e8af689695b9b69aa7")
more.join.sendTransaction("0x89f2fbf63ec523b57fb0e2e8af689695b9b69aa7", {from:eth.accounts[1], to:"0x89f2fbf63ec523b57fb0e2e8af689695b9b69aa7", value:web3.toWei(1,"ether")})
var abi = [{"inputs":[{"internalType":"string","name":"_time","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"address","name":"mem","type":"address"}],"name":"joining","type":"event"},{"inputs":[{"internalType":"address","name":"_agent","type":"address"},{"internalType":"string","name":"_contents","type":"string"},{"internalType":"uint256","name":"_goalNum","type":"uint256"},{"internalType":"uint256","name":"_deadline","type":"uint256"},{"internalType":"uint256","name":"_fee","type":"uint256"}],"name":"addCa","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"admin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"calist","outputs":[{"internalType":"string","name":"contents","type":"string"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"goalNum","type":"uint256"},{"internalType":"uint256","name":"fee","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"endTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_agent","type":"address"}],"name":"getInfo","outputs":[{"internalType":"string","name":"_contents","type":"string"},{"internalType":"uint256","name":"_deadline","type":"uint256"},{"internalType":"uint256","name":"_goalNum","type":"uint256"},{"internalType":"uint256","name":"_fee","type":"uint256"},{"internalType":"address[]","name":"_members","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_agent","type":"address"}],"name":"join","outputs":[],"stateMutability":"payable","payable":true"type":"function"},{"inputs":[{"internalType":"address","name":"_agent","type":"address"}],"name":"nowNum","outputs":[{"internalType":"uint256","name":"number","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_agent","type":"address"}],"name":"remain","outputs":[{"internalType":"uint256","name":"min","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"time","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}]
var abi = [{"inputs":[{"internalType":"string","name":"_time","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"agent","type":"address"},{"indexed":true,"internalType":"address","name":"mem","type":"address"}],"name":"joining","type":"event"},{"inputs":[{"internalType":"address","name":"_agent","type":"address"},{"internalType":"string","name":"_contents","type":"string"},{"internalType":"uint256","name":"_goalNum","type":"uint256"},{"internalType":"uint256","name":"_deadline","type":"uint256"},{"internalType":"uint256","name":"_fee","type":"uint256"}],"name":"addCa","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"admin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"calist","outputs":[{"internalType":"string","name":"contents","type":"string"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"goalNum","type":"uint256"},{"internalType":"uint256","name":"fee","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"endTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_agent","type":"address"}],"name":"getInfo","outputs":[{"internalType":"string","name":"_contents","type":"string"},{"internalType":"uint256","name":"_deadline","type":"uint256"},{"internalType":"uint256","name":"_goalNum","type":"uint256"},{"internalType":"uint256","name":"_fee","type":"uint256"},{"internalType":"address[]","name":"_members","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_agent","type":"address"}],"name":"join","outputs":[],"stateMutability":"payable","payable":true,"type":"function"},{"inputs":[{"internalType":"address","name":"_agent","type":"address"}],"name":"nowNum","outputs":[{"internalType":"uint256","name":"number","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_agent","type":"address"}],"name":"remain","outputs":[{"internalType":"uint256","name":"min","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"time","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}]
abi
var moreContract = web3.eth.contract(abi)
var more = moreContract.new("6C979FA9504CF6EABC046A8820586CDC7CD018599B5B3076FC960B20BC8FFE13", {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0x10c8e0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
more
eth.accounts
more.addCa.sendTransaction("0x5894d987cfc846830b693378d3676899ed7015d5", "52D000D66E68743772A7727C6EF43F18C2EA65817C989A67EFB2F2CE708C1C18", 2, 10, 1, {from:eth.accounts[0]})
miner.start(1)
miner.stop()
more.getInfo.call("0x5894d987cfc846830b693378d3676899ed7015d5")
more.join.sendTransaction("0x5894d987cfc846830b693378d3676899ed7015d5", {from:eth.accounts[2], to:"0x05c067e8a026c5efd1394288a08c6e0cd5b1ea19", value:web3.toWei(1,"ether")})
miner.start(1)
miner.stop()
more.getInfo.call("0x5894d987cfc846830b693378d3676899ed7015d5")
eth.getTransaction("0x55259d7308dbf581a4806dc7e90b525b1cc5924f72b9c6d105a6d6ab030e326a")
more.join.sendTransaction("0x5894d987cfc846830b693378d3676899ed7015d5", {from:eth.accounts[0], to:"0x05c067e8a026c5efd1394288a08c6e0cd5b1ea19", value:web3.toWei(1,"ether")})
miner.start(1)
miner.stop()
eth.getTransaction("0xbf83b4272125a8770e0044111c2d22734f5eaf596e9783e008fd0c14825eef6b")
var abi = [{"inputs":[{"internalType":"string","name":"_contents","type":"string"},{"internalType":"uint256","name":"_goalNum","type":"uint256"},{"internalType":"uint256","name":"_deadline","type":"uint256"},{"internalType":"uint256","name":"_fee","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"mem","type":"address"}],"name":"joining","type":"event"},{"inputs":[],"name":"agent","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"contents","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"deadline","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getInfo","outputs":[{"internalType":"address","name":"_agent","type":"address"},{"internalType":"string","name":"_contents","type":"string"},{"internalType":"uint256","name":"_deadline","type":"uint256"},{"internalType":"uint256","name":"_goalNum","type":"uint256"},{"internalType":"uint256","name":"_fee","type":"uint256"},{"internalType":"address[]","name":"_members","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"goalNum","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"members","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nowNum","outputs":[{"internalType":"uint256","name":"number","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"remain","outputs":[{"internalType":"uint256","name":"min","type":"uint256"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}]
var bytecode = "0x60806040523480156200001157600080fd5b5060405162000f2038038062000f20833981810160405281019062000037919062000367565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600190805190602001906200008f929190620000df565b50603c826200009f919062000427565b42620000ac919062000488565b600281905550670de0b6b3a764000081620000c8919062000427565b600481905550826003819055505050505062000549565b828054620000ed9062000514565b90600052602060002090601f0160209004810192826200011157600085556200015d565b82601f106200012c57805160ff19168380011785556200015d565b828001600101855582156200015d579182015b828111156200015c5782518255916020019190600101906200013f565b5b5090506200016c919062000170565b5090565b5b808211156200018b57600081600090555060010162000171565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001f882620001ad565b810181811067ffffffffffffffff821117156200021a5762000219620001be565b5b80604052505050565b60006200022f6200018f565b90506200023d8282620001ed565b919050565b600067ffffffffffffffff82111562000260576200025f620001be565b5b6200026b82620001ad565b9050602081019050919050565b60005b83811015620002985780820151818401526020810190506200027b565b83811115620002a8576000848401525b50505050565b6000620002c5620002bf8462000242565b62000223565b905082815260208101848484011115620002e457620002e3620001a8565b5b620002f184828562000278565b509392505050565b600082601f830112620003115762000310620001a3565b5b815162000323848260208601620002ae565b91505092915050565b6000819050919050565b62000341816200032c565b81146200034d57600080fd5b50565b600081519050620003618162000336565b92915050565b6000806000806080858703121562000384576200038362000199565b5b600085015167ffffffffffffffff811115620003a557620003a46200019e565b5b620003b387828801620002f9565b9450506020620003c68782880162000350565b9350506040620003d98782880162000350565b9250506060620003ec8782880162000350565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000434826200032c565b915062000441836200032c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156200047d576200047c620003f8565b5b828202905092915050565b600062000495826200032c565b9150620004a2836200032c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620004da57620004d9620003f8565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200052d57607f821691505b602082108103620005435762000542620004e5565b5b50919050565b6109c780620005596000396000f3fe60806040526004361061008a5760003560e01c806385f980ba1161005957806385f980ba1461022a578063955c986714610255578063cac1ec6314610280578063ddca3f43146102ab578063f5ff5c76146102d657610162565b806329dcb0cf146101675780635a9b0b89146101925780635daf08ca146101c257806361f3c62e146101ff57610162565b366101625742600254111561016057600454341480156100b05750600580549050600354115b6100b957600080fd5b6005339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f28074385dbf4617758518e01a664dacbe39ad48b57ff8e90c5ae728d41c0464e60405160405180910390a25b005b600080fd5b34801561017357600080fd5b5061017c610301565b60405161018991906105b1565b60405180910390f35b34801561019e57600080fd5b506101a7610307565b6040516101b996959493929190610764565b60405180910390f35b3480156101ce57600080fd5b506101e960048036038101906101e49190610804565b610462565b6040516101f69190610831565b60405180910390f35b34801561020b57600080fd5b506102146104a1565b60405161022191906105b1565b60405180910390f35b34801561023657600080fd5b5061023f6104cd565b60405161024c91906105b1565b60405180910390f35b34801561026157600080fd5b5061026a6104d3565b604051610277919061084c565b60405180910390f35b34801561028c57600080fd5b50610295610561565b6040516102a291906105b1565b60405180910390f35b3480156102b757600080fd5b506102c061056e565b6040516102cd91906105b1565b60405180910390f35b3480156102e257600080fd5b506102eb610574565b6040516102f89190610831565b60405180910390f35b60025481565b600060606000806000606060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff169550600180546103429061089d565b80601f016020809104026020016040519081016040528092919081815260200182805461036e9061089d565b80156103bb5780601f10610390576101008083540402835291602001916103bb565b820191906000526020600020905b81548152906001019060200180831161039e57829003601f168201915b50505050509450600254935060035492506004549150600580548060200260200160405190810160405280929190818152602001828054801561045357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610409575b50505050509050909192939495565b6005818154811061047257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006002544210156104ca57603c426002546104bd91906108fd565b6104c79190610960565b90505b90565b60035481565b600180546104e09061089d565b80601f016020809104026020016040519081016040528092919081815260200182805461050c9061089d565b80156105595780601f1061052e57610100808354040283529160200191610559565b820191906000526020600020905b81548152906001019060200180831161053c57829003601f168201915b505050505081565b6000600580549050905090565b60045481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000819050919050565b6105ab81610598565b82525050565b60006020820190506105c660008301846105a2565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105f7826105cc565b9050919050565b610607816105ec565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561064757808201518184015260208101905061062c565b83811115610656576000848401525b50505050565b6000601f19601f8301169050919050565b60006106788261060d565b6106828185610618565b9350610692818560208601610629565b61069b8161065c565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6106db816105ec565b82525050565b60006106ed83836106d2565b60208301905092915050565b6000602082019050919050565b6000610711826106a6565b61071b81856106b1565b9350610726836106c2565b8060005b8381101561075757815161073e88826106e1565b9750610749836106f9565b92505060018101905061072a565b5085935050505092915050565b600060c08201905061077960008301896105fe565b818103602083015261078b818861066d565b905061079a60408301876105a2565b6107a760608301866105a2565b6107b460808301856105a2565b81810360a08301526107c68184610706565b9050979650505050505050565b600080fd5b6107e181610598565b81146107ec57600080fd5b50565b6000813590506107fe816107d8565b92915050565b60006020828403121561081a576108196107d3565b5b6000610828848285016107ef565b91505092915050565b600060208201905061084660008301846105fe565b92915050565b60006020820190508181036000830152610866818461066d565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806108b557607f821691505b6020821081036108c8576108c761086e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061090882610598565b915061091383610598565b925082821015610926576109256108ce565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061096b82610598565b915061097683610598565b92508261098657610985610931565b5b82820490509291505056fea264697066735822122051feabf05cd2fe81eab22aa70c1c2ee5d096f0401e7ab8a1140c4eb98941bd5064736f6c634300080d0033"
var address =""
var oneContract = web3.eth.contract(abi)
var one = oneContract.new("AA14E601C7EDD460E91988E0B9E3242DDCC4AA9FD4FD4828CEBEC7D33CAEC4F3", 10, 30, 1, {
 from: eth.accounts[0],
 data: bytecode,
 gas: 0xb90f0
}, function(e, contract) {
 if (e) {
     console.log("err creating contract", e);
 } else {
     if (!contract.address) {
         console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
     } else {
         console.log("Contract mined! Address: " + contract.address);
         address = contract.address
         console.log(contract);
         console.log(contract.displayMessage());
     }
 }
});
miner.start(1)
miner.stop()
eth.accounts[1]
eth.accounts[0]
eth.sendTransaction({from:eth.accounts[1], to:"0x19d1488a4d1fbaacec2108a6ba0d5f969026b464", value:web3.toWei(1,"ether")})
eth.getBalance(eth.accounts[1])
miner.start(1)
miner.stop()
eth.getBalance(eth.accounts[1])
eth.sendTransaction({from:eth.accounts[2], to:"0x19d1488a4d1fbaacec2108a6ba0d5f969026b464", value:web3.toWei(1,"ether")})
miner.start(1)
miner.stop()
eth.getTransaction("0x558ce4ed24adf6c39a7d0f1bdc14f86cf56a55ae57b01708db0fcd0be6b9c59f")
eth.sendTransaction({from:eth.accounts[3], to:"0x19d1488a4d1fbaacec2108a6ba0d5f969026b464", value:web3.toWei(1,"ether")})
eth.getTransaction("0x5f8769cbfb1b540c650ae059a4d5d646f104007869136531bc0de4cdd0501831")
eth.getBalance(eth.accounts[2])
miner.start(1)
miner.stop()
eth.getBalance(eth.accounts[2])
eth.pendingTransactions
eth.getBalance(eth.accounts[3])
eth.sendTransaction({from:eth.accounts[4], to:"0x19d1488a4d1fbaacec2108a6ba0d5f969026b464", value:web3.toWei(1,"ether")})
eth.getBalance(eth.accounts[4])
miner.start(1)
miner.stop()
eth.getBalance(eth.accounts[4])
eth.blocks
eth.syncing
eth.blockNumber
eth.accounts
eth.getbalance(eth.accounts[1])
eth.getBalance(eth.accounts[1])
eth.accounts[1]
eth.getBalance(eth.accounts[1])
miner.start(1)
miner.stop(1)
miner.stop()
eth.blockNumber
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
eth.accounts
eth.account[5]
eth.accounts[5]
ls
eth.accounts
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
eth.account[0]
eth.accounts
eth.account(0)
eth.accounts[0]
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()